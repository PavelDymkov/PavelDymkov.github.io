(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _templateObject = _taggedTemplateLiteral(["\n\t\tSTART_GAME\n\t\tCONTINUE_GAME\n\t\tRESTART_GAME\n\t\tTO_MAIN_MENU\n\t"], ["\n\t\tSTART_GAME\n\t\tCONTINUE_GAME\n\t\tRESTART_GAME\n\t\tTO_MAIN_MENU\n\t"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libsDispatcherEs6 = require("../libs/dispatcher.es6");

var _libsDispatcherEs62 = _interopRequireDefault(_libsDispatcherEs6);

var _libsEnumEs6 = require("../libs/enum.es6");

var _libsEnumEs62 = _interopRequireDefault(_libsEnumEs6);

var appActions = (0, _libsEnumEs62["default"])(_templateObject);

exports.appActions = appActions;
var startGame = function startGame(difficult) {
	return _libsDispatcherEs62["default"].dispatch({
		type: appActions.START_GAME,
		difficult: difficult
	});
};

exports.startGame = startGame;
var continueGame = function continueGame() {
	return _libsDispatcherEs62["default"].dispatch({
		type: appActions.CONTINUE_GAME
	});
};

exports.continueGame = continueGame;
var restartGame = function restartGame() {
	return _libsDispatcherEs62["default"].dispatch({
		type: appActions.RESTART_GAME
	});
};

exports.restartGame = restartGame;
var toMainSrceen = function toMainSrceen() {
	return _libsDispatcherEs62["default"].dispatch({
		type: appActions.TO_MAIN_MENU
	});
};
exports.toMainSrceen = toMainSrceen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2FjdGlvbnMvYXBwX2FjdGlvbnMuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztpQ0FBdUIsd0JBQXdCOzs7OzJCQUM5QixrQkFBa0I7Ozs7QUFHNUIsSUFBTSxVQUFVLGlEQU1yQixDQUFBOzs7QUFFSyxJQUFNLFNBQVMsR0FBRyxTQUFaLFNBQVMsQ0FBSSxTQUFTO1FBQ2xDLCtCQUFXLFFBQVEsQ0FBQztBQUNuQixNQUFJLEVBQUUsVUFBVSxDQUFDLFVBQVU7QUFDM0IsV0FBUyxFQUFULFNBQVM7RUFDVCxDQUFDO0NBQUEsQ0FBQzs7O0FBRUcsSUFBTSxZQUFZLEdBQUcsU0FBZixZQUFZO1FBQ3hCLCtCQUFXLFFBQVEsQ0FBQztBQUNuQixNQUFJLEVBQUUsVUFBVSxDQUFDLGFBQWE7RUFDOUIsQ0FBQztDQUFBLENBQUM7OztBQUVHLElBQU0sV0FBVyxHQUFHLFNBQWQsV0FBVztRQUN2QiwrQkFBVyxRQUFRLENBQUM7QUFDbkIsTUFBSSxFQUFFLFVBQVUsQ0FBQyxZQUFZO0VBQzdCLENBQUM7Q0FBQSxDQUFDOzs7QUFFRyxJQUFNLFlBQVksR0FBRyxTQUFmLFlBQVk7UUFDeEIsK0JBQVcsUUFBUSxDQUFDO0FBQ25CLE1BQUksRUFBRSxVQUFVLENBQUMsWUFBWTtFQUM3QixDQUFDO0NBQUEsQ0FBQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy9hY3Rpb25zL2FwcF9hY3Rpb25zLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaXNwYXRjaGVyIGZyb20gXCIuLi9saWJzL2Rpc3BhdGNoZXIuZXM2XCI7XG5pbXBvcnQgRW51bSBmcm9tIFwiLi4vbGlicy9lbnVtLmVzNlwiO1xuXG5cbmV4cG9ydCBjb25zdCBhcHBBY3Rpb25zID1cblx0RW51bSBgXG5cdFx0U1RBUlRfR0FNRVxuXHRcdENPTlRJTlVFX0dBTUVcblx0XHRSRVNUQVJUX0dBTUVcblx0XHRUT19NQUlOX01FTlVcblx0YFxuXG5leHBvcnQgY29uc3Qgc3RhcnRHYW1lID0gKGRpZmZpY3VsdCkgPT5cblx0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0dHlwZTogYXBwQWN0aW9ucy5TVEFSVF9HQU1FLFxuXHRcdGRpZmZpY3VsdFxuXHR9KTtcblxuZXhwb3J0IGNvbnN0IGNvbnRpbnVlR2FtZSA9ICgpID0+XG5cdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuXHRcdHR5cGU6IGFwcEFjdGlvbnMuQ09OVElOVUVfR0FNRVxuXHR9KTtcblxuZXhwb3J0IGNvbnN0IHJlc3RhcnRHYW1lID0gKCkgPT5cblx0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0dHlwZTogYXBwQWN0aW9ucy5SRVNUQVJUX0dBTUVcblx0fSk7XG5cbmV4cG9ydCBjb25zdCB0b01haW5TcmNlZW4gPSAoKSA9PlxuXHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHR0eXBlOiBhcHBBY3Rpb25zLlRPX01BSU5fTUVOVVxuXHR9KTsiXX0=
},{"../libs/dispatcher.es6":6,"../libs/enum.es6":7}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _templateObject = _taggedTemplateLiteral(["\n\t\tCHECK_CELL\n\t\tSET_FLAG\n\t\tCHECK_ALL_ARROUND_MINES_FLAGGED\n\t\tMARK_CELL\n\t\tUNMARK_CELL\n\t\tMARK_AREA\n\t\tUNMARK_AREA\n\t"], ["\n\t\tCHECK_CELL\n\t\tSET_FLAG\n\t\tCHECK_ALL_ARROUND_MINES_FLAGGED\n\t\tMARK_CELL\n\t\tUNMARK_CELL\n\t\tMARK_AREA\n\t\tUNMARK_AREA\n\t"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libsDispatcherEs6 = require("../libs/dispatcher.es6");

var _libsDispatcherEs62 = _interopRequireDefault(_libsDispatcherEs6);

var _libsEnumEs6 = require("../libs/enum.es6");

var _libsEnumEs62 = _interopRequireDefault(_libsEnumEs6);

var gameplayActions = (0, _libsEnumEs62["default"])(_templateObject);

exports.gameplayActions = gameplayActions;
var checkCell = function checkCell(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.CHECK_CELL,
		row: row, column: column
	});
};

exports.checkCell = checkCell;
var setFlag = function setFlag(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.SET_FLAG,
		row: row, column: column
	});
};

exports.setFlag = setFlag;
var checkAllArroundMinesFlagged = function checkAllArroundMinesFlagged(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.CHECK_ALL_ARROUND_MINES_FLAGGED,
		row: row, column: column
	});
};

exports.checkAllArroundMinesFlagged = checkAllArroundMinesFlagged;
var markCell = function markCell(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.MARK_CELL,
		row: row, column: column
	});
};

exports.markCell = markCell;
var unmarkCell = function unmarkCell(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.UNMARK_CELL,
		row: row, column: column
	});
};

exports.unmarkCell = unmarkCell;
var markArea = function markArea(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.MARK_AREA,
		row: row, column: column
	});
};

exports.markArea = markArea;
var unmarkArea = function unmarkArea(row, column) {
	return _libsDispatcherEs62["default"].dispatch({
		type: gameplayActions.UNMARK_AREA,
		row: row, column: column
	});
};
exports.unmarkArea = unmarkArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2FjdGlvbnMvZ2FtZXBsYXlfYWN0aW9ucy5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2lDQUF1Qix3QkFBd0I7Ozs7MkJBQzlCLGtCQUFrQjs7OztBQUc1QixJQUFNLGVBQWUsaURBUzFCLENBQUE7OztBQUVLLElBQU0sU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFJLEdBQUcsRUFBRSxNQUFNO1FBQ3BDLCtCQUFXLFFBQVEsQ0FBQztBQUNuQixNQUFJLEVBQUUsZUFBZSxDQUFDLFVBQVU7QUFDaEMsS0FBRyxFQUFILEdBQUcsRUFBRSxNQUFNLEVBQU4sTUFBTTtFQUNYLENBQUM7Q0FBQSxDQUFDOzs7QUFFRyxJQUFNLE9BQU8sR0FBRyxTQUFWLE9BQU8sQ0FBSSxHQUFHLEVBQUUsTUFBTTtRQUNsQywrQkFBVyxRQUFRLENBQUM7QUFDbkIsTUFBSSxFQUFFLGVBQWUsQ0FBQyxRQUFRO0FBQzlCLEtBQUcsRUFBSCxHQUFHLEVBQUUsTUFBTSxFQUFOLE1BQU07RUFDWCxDQUFDO0NBQUEsQ0FBQzs7O0FBRUcsSUFBTSwyQkFBMkIsR0FBRyxTQUE5QiwyQkFBMkIsQ0FBSSxHQUFHLEVBQUUsTUFBTTtRQUN0RCwrQkFBVyxRQUFRLENBQUM7QUFDbkIsTUFBSSxFQUFFLGVBQWUsQ0FBQywrQkFBK0I7QUFDckQsS0FBRyxFQUFILEdBQUcsRUFBRSxNQUFNLEVBQU4sTUFBTTtFQUNYLENBQUM7Q0FBQSxDQUFDOzs7QUFFRyxJQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVEsQ0FBSSxHQUFHLEVBQUUsTUFBTTtRQUNuQywrQkFBVyxRQUFRLENBQUM7QUFDbkIsTUFBSSxFQUFFLGVBQWUsQ0FBQyxTQUFTO0FBQy9CLEtBQUcsRUFBSCxHQUFHLEVBQUUsTUFBTSxFQUFOLE1BQU07RUFDWCxDQUFDO0NBQUEsQ0FBQzs7O0FBRUcsSUFBTSxVQUFVLEdBQUcsU0FBYixVQUFVLENBQUksR0FBRyxFQUFFLE1BQU07UUFDckMsK0JBQVcsUUFBUSxDQUFDO0FBQ25CLE1BQUksRUFBRSxlQUFlLENBQUMsV0FBVztBQUNqQyxLQUFHLEVBQUgsR0FBRyxFQUFFLE1BQU0sRUFBTixNQUFNO0VBQ1gsQ0FBQztDQUFBLENBQUM7OztBQUVHLElBQU0sUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFJLEdBQUcsRUFBRSxNQUFNO1FBQ25DLCtCQUFXLFFBQVEsQ0FBQztBQUNuQixNQUFJLEVBQUUsZUFBZSxDQUFDLFNBQVM7QUFDL0IsS0FBRyxFQUFILEdBQUcsRUFBRSxNQUFNLEVBQU4sTUFBTTtFQUNYLENBQUM7Q0FBQSxDQUFDOzs7QUFFRyxJQUFNLFVBQVUsR0FBRyxTQUFiLFVBQVUsQ0FBSSxHQUFHLEVBQUUsTUFBTTtRQUNyQywrQkFBVyxRQUFRLENBQUM7QUFDbkIsTUFBSSxFQUFFLGVBQWUsQ0FBQyxXQUFXO0FBQ2pDLEtBQUcsRUFBSCxHQUFHLEVBQUUsTUFBTSxFQUFOLE1BQU07RUFDWCxDQUFDO0NBQUEsQ0FBQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy9hY3Rpb25zL2dhbWVwbGF5X2FjdGlvbnMuZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpc3BhdGNoZXIgZnJvbSBcIi4uL2xpYnMvZGlzcGF0Y2hlci5lczZcIjtcbmltcG9ydCBFbnVtIGZyb20gXCIuLi9saWJzL2VudW0uZXM2XCI7XG5cblxuZXhwb3J0IGNvbnN0IGdhbWVwbGF5QWN0aW9ucyA9XG5cdEVudW0gYFxuXHRcdENIRUNLX0NFTExcblx0XHRTRVRfRkxBR1xuXHRcdENIRUNLX0FMTF9BUlJPVU5EX01JTkVTX0ZMQUdHRURcblx0XHRNQVJLX0NFTExcblx0XHRVTk1BUktfQ0VMTFxuXHRcdE1BUktfQVJFQVxuXHRcdFVOTUFSS19BUkVBXG5cdGBcblxuZXhwb3J0IGNvbnN0IGNoZWNrQ2VsbCA9IChyb3csIGNvbHVtbikgPT5cblx0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0dHlwZTogZ2FtZXBsYXlBY3Rpb25zLkNIRUNLX0NFTEwsXG5cdFx0cm93LCBjb2x1bW5cblx0fSk7XG5cbmV4cG9ydCBjb25zdCBzZXRGbGFnID0gKHJvdywgY29sdW1uKSA9PlxuXHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHR0eXBlOiBnYW1lcGxheUFjdGlvbnMuU0VUX0ZMQUcsXG5cdFx0cm93LCBjb2x1bW5cblx0fSk7XG5cbmV4cG9ydCBjb25zdCBjaGVja0FsbEFycm91bmRNaW5lc0ZsYWdnZWQgPSAocm93LCBjb2x1bW4pID0+XG5cdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuXHRcdHR5cGU6IGdhbWVwbGF5QWN0aW9ucy5DSEVDS19BTExfQVJST1VORF9NSU5FU19GTEFHR0VELFxuXHRcdHJvdywgY29sdW1uXG5cdH0pO1xuXG5leHBvcnQgY29uc3QgbWFya0NlbGwgPSAocm93LCBjb2x1bW4pID0+XG5cdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuXHRcdHR5cGU6IGdhbWVwbGF5QWN0aW9ucy5NQVJLX0NFTEwsXG5cdFx0cm93LCBjb2x1bW5cblx0fSk7XG5cbmV4cG9ydCBjb25zdCB1bm1hcmtDZWxsID0gKHJvdywgY29sdW1uKSA9PlxuXHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHR0eXBlOiBnYW1lcGxheUFjdGlvbnMuVU5NQVJLX0NFTEwsXG5cdFx0cm93LCBjb2x1bW5cblx0fSk7XG5cbmV4cG9ydCBjb25zdCBtYXJrQXJlYSA9IChyb3csIGNvbHVtbikgPT5cblx0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0dHlwZTogZ2FtZXBsYXlBY3Rpb25zLk1BUktfQVJFQSxcblx0XHRyb3csIGNvbHVtblxuXHR9KTtcblxuZXhwb3J0IGNvbnN0IHVubWFya0FyZWEgPSAocm93LCBjb2x1bW4pID0+XG5cdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuXHRcdHR5cGU6IGdhbWVwbGF5QWN0aW9ucy5VTk1BUktfQVJFQSxcblx0XHRyb3csIGNvbHVtblxuXHR9KTsiXX0=
},{"../libs/dispatcher.es6":6,"../libs/enum.es6":7}],3:[function(require,module,exports){
"use strict";

var _viewsMinesweeperEs6 = require("./views/minesweeper.es6");

ReactDOM.render(React.createElement(_viewsMinesweeperEs6.Minesweeper, null), document.getElementById("minesweeper"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2FwcGxpY2F0aW9uLmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzttQ0FBNEIseUJBQXlCOztBQUdyRCxRQUFRLENBQUMsTUFBTSxDQUFDLDJEQUFlLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2FwcGxpY2F0aW9uLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1pbmVzd2VlcGVyIH0gZnJvbSBcIi4vdmlld3MvbWluZXN3ZWVwZXIuZXM2XCI7XG5cblxuUmVhY3RET00ucmVuZGVyKDxNaW5lc3dlZXBlciAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaW5lc3dlZXBlclwiKSk7Il19
},{"./views/minesweeper.es6":25}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ControllerView = (function (_React$Component) {
	_inherits(ControllerView, _React$Component);

	function ControllerView(store) {
		_classCallCheck(this, ControllerView);

		_get(Object.getPrototypeOf(ControllerView.prototype), "constructor", this).call(this);

		this.store = store;

		var payload = store.getPayload();

		this.state = this.computeState(payload);

		this.onChange = this.onChange.bind(this);
	}

	_createClass(ControllerView, [{
		key: "computeState",
		value: function computeState(payload) {
			return payload;
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			this.store.addListener(this.onChange);
		}
	}, {
		key: "componentWillUnmount",
		value: function componentWillUnmount() {
			this.store.removeListener(this.onChange);
		}
	}, {
		key: "onChange",
		value: function onChange(payload) {
			var state = this.computeState(payload);

			this.setState(state);
		}
	}, {
		key: "render",
		value: function render() {
			throw new Error("no implamentation");
		}
	}]);

	return ControllerView;
})(React.Component);

exports["default"] = ControllerView;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvY29udHJvbGxlci12aWV3LmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixjQUFjO1dBQWQsY0FBYzs7QUFDdkIsVUFEUyxjQUFjLENBQ3RCLEtBQUssRUFBRTt3QkFEQyxjQUFjOztBQUVqQyw2QkFGbUIsY0FBYyw2Q0FFekI7O0FBRVIsTUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7O0FBRW5CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7QUFFakMsTUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUV4QyxNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3pDOztjQVhtQixjQUFjOztTQWF0QixzQkFBQyxPQUFPLEVBQUU7QUFDckIsVUFBTyxPQUFPLENBQUM7R0FDZjs7O1NBRWdCLDZCQUFHO0FBQ25CLE9BQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUN0Qzs7O1NBRW1CLGdDQUFHO0FBQ3RCLE9BQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUN6Qzs7O1NBRU8sa0JBQUMsT0FBTyxFQUFFO0FBQ2pCLE9BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXZDLE9BQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDckI7OztTQUVNLGtCQUFHO0FBQ1QsU0FBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0dBQ3JDOzs7UUFqQ21CLGNBQWM7R0FBUyxLQUFLLENBQUMsU0FBUzs7cUJBQXRDLGNBQWMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvbGlicy9jb250cm9sbGVyLXZpZXcuZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlclZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXHRjb25zdHJ1Y3RvcihzdG9yZSkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnN0b3JlID0gc3RvcmU7XG5cblx0XHRsZXQgcGF5bG9hZCA9IHN0b3JlLmdldFBheWxvYWQoKTtcblxuXHRcdHRoaXMuc3RhdGUgPSB0aGlzLmNvbXB1dGVTdGF0ZShwYXlsb2FkKTtcblxuXHRcdHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG5cdH1cblxuXHRjb21wdXRlU3RhdGUocGF5bG9hZCkge1xuXHRcdHJldHVybiBwYXlsb2FkO1xuXHR9XG5cblx0Y29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0dGhpcy5zdG9yZS5hZGRMaXN0ZW5lcih0aGlzLm9uQ2hhbmdlKTtcblx0fVxuXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdHRoaXMuc3RvcmUucmVtb3ZlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdH1cblxuXHRvbkNoYW5nZShwYXlsb2FkKSB7XG5cdFx0bGV0IHN0YXRlID0gdGhpcy5jb21wdXRlU3RhdGUocGF5bG9hZCk7XG5cdFx0XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG5cdH1cblxuXHRyZW5kZXIgKCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIm5vIGltcGxhbWVudGF0aW9uXCIpO1xuXHR9XG59Il19
},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports["default"] = Object.freeze({
	APPLICATION: "minesweeper-app_container",
	MENU_LAYOUT: "minesweeper-menu_layout",
	GAME_LAYOUT: "minesweeper-game_layout",
	GAME: "minesweeper-game",
	GAME_INFO: "minesweeper-game_info",
	BATTLEFIELD: "minesweeper-battlefield",
	CELL: "minesweeper-cell",
	CHECKED: "minesweeper-checked",
	UNDERMINED: "minesweeper-undermined",
	EMPTY_CELL: "minesweeper-empty_cell",
	MARKED: "minesweeper-marked",
	HOVERED: "minesweeper-hovered",
	ONE_MINE_ARROUND: "minesweeper-one_mine_arround",
	TWO_MINES_ARROUND: "minesweeper-two_mines_arround",
	THREE_MINES_ARROUND: "minesweeper-three_mines_arround",
	FOUR_MINES_ARROUND: "minesweeper-four_mines_arround",
	FIVE_MINES_ARROUND: "minesweeper-five_mines_arround",
	SIX_MINES_ARROUND: "minesweeper-six_mines_arround",
	SEVEN_MINES_ARROUND: "minesweeper-seven_mines_arround",
	EIGHT_MINES_ARROUND: "minesweeper-eight_mines_arround",
	BUTTON: "minesweeper-button",
	HORIZONTAL_LAYOUT: "minesweeper-horizontal_layout",
	VERTICAL_LAYOUT: "minesweeper-vertical_layout",
	GAMEOVER_LAYOUT: "minesweeper-gameover_layout",
	GAMEOVER_TEXT: "minesweeper-gameover_text",
	TOUCH_DEVICE_LAYOUT: "minesweeper-touch_device_layout",
	SOURCE_LINK: "minesweeper-source_link"
});
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvY3NzLWNsYXNzLWxpc3QuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUFlLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDNUIsWUFBVyxFQUFFLDJCQUEyQjtBQUN4QyxZQUFXLEVBQUUseUJBQXlCO0FBQ3RDLFlBQVcsRUFBRSx5QkFBeUI7QUFDdEMsS0FBSSxFQUFFLGtCQUFrQjtBQUN4QixVQUFTLEVBQUUsdUJBQXVCO0FBQ2xDLFlBQVcsRUFBRSx5QkFBeUI7QUFDdEMsS0FBSSxFQUFFLGtCQUFrQjtBQUN4QixRQUFPLEVBQUUscUJBQXFCO0FBQzlCLFdBQVUsRUFBRSx3QkFBd0I7QUFDcEMsV0FBVSxFQUFFLHdCQUF3QjtBQUNwQyxPQUFNLEVBQUUsb0JBQW9CO0FBQzVCLFFBQU8sRUFBRSxxQkFBcUI7QUFDOUIsaUJBQWdCLEVBQUUsOEJBQThCO0FBQ2hELGtCQUFpQixFQUFFLCtCQUErQjtBQUNsRCxvQkFBbUIsRUFBRSxpQ0FBaUM7QUFDdEQsbUJBQWtCLEVBQUUsZ0NBQWdDO0FBQ3BELG1CQUFrQixFQUFFLGdDQUFnQztBQUNwRCxrQkFBaUIsRUFBRSwrQkFBK0I7QUFDbEQsb0JBQW1CLEVBQUUsaUNBQWlDO0FBQ3RELG9CQUFtQixFQUFFLGlDQUFpQztBQUN0RCxPQUFNLEVBQUUsb0JBQW9CO0FBQzVCLGtCQUFpQixFQUFFLCtCQUErQjtBQUNsRCxnQkFBZSxFQUFFLDZCQUE2QjtBQUM5QyxnQkFBZSxFQUFFLDZCQUE2QjtBQUM5QyxjQUFhLEVBQUUsMkJBQTJCO0FBQzFDLG9CQUFtQixFQUFFLGlDQUFpQztBQUN0RCxZQUFXLEVBQUUseUJBQXlCO0NBQ3RDLENBQUMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvbGlicy9jc3MtY2xhc3MtbGlzdC5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKHtcblx0QVBQTElDQVRJT046IFwibWluZXN3ZWVwZXItYXBwX2NvbnRhaW5lclwiLFxuXHRNRU5VX0xBWU9VVDogXCJtaW5lc3dlZXBlci1tZW51X2xheW91dFwiLFxuXHRHQU1FX0xBWU9VVDogXCJtaW5lc3dlZXBlci1nYW1lX2xheW91dFwiLFxuXHRHQU1FOiBcIm1pbmVzd2VlcGVyLWdhbWVcIixcblx0R0FNRV9JTkZPOiBcIm1pbmVzd2VlcGVyLWdhbWVfaW5mb1wiLFxuXHRCQVRUTEVGSUVMRDogXCJtaW5lc3dlZXBlci1iYXR0bGVmaWVsZFwiLFxuXHRDRUxMOiBcIm1pbmVzd2VlcGVyLWNlbGxcIixcblx0Q0hFQ0tFRDogXCJtaW5lc3dlZXBlci1jaGVja2VkXCIsXG5cdFVOREVSTUlORUQ6IFwibWluZXN3ZWVwZXItdW5kZXJtaW5lZFwiLFxuXHRFTVBUWV9DRUxMOiBcIm1pbmVzd2VlcGVyLWVtcHR5X2NlbGxcIixcblx0TUFSS0VEOiBcIm1pbmVzd2VlcGVyLW1hcmtlZFwiLFxuXHRIT1ZFUkVEOiBcIm1pbmVzd2VlcGVyLWhvdmVyZWRcIixcblx0T05FX01JTkVfQVJST1VORDogXCJtaW5lc3dlZXBlci1vbmVfbWluZV9hcnJvdW5kXCIsXG5cdFRXT19NSU5FU19BUlJPVU5EOiBcIm1pbmVzd2VlcGVyLXR3b19taW5lc19hcnJvdW5kXCIsXG5cdFRIUkVFX01JTkVTX0FSUk9VTkQ6IFwibWluZXN3ZWVwZXItdGhyZWVfbWluZXNfYXJyb3VuZFwiLFxuXHRGT1VSX01JTkVTX0FSUk9VTkQ6IFwibWluZXN3ZWVwZXItZm91cl9taW5lc19hcnJvdW5kXCIsXG5cdEZJVkVfTUlORVNfQVJST1VORDogXCJtaW5lc3dlZXBlci1maXZlX21pbmVzX2Fycm91bmRcIixcblx0U0lYX01JTkVTX0FSUk9VTkQ6IFwibWluZXN3ZWVwZXItc2l4X21pbmVzX2Fycm91bmRcIixcblx0U0VWRU5fTUlORVNfQVJST1VORDogXCJtaW5lc3dlZXBlci1zZXZlbl9taW5lc19hcnJvdW5kXCIsXG5cdEVJR0hUX01JTkVTX0FSUk9VTkQ6IFwibWluZXN3ZWVwZXItZWlnaHRfbWluZXNfYXJyb3VuZFwiLFxuXHRCVVRUT046IFwibWluZXN3ZWVwZXItYnV0dG9uXCIsXG5cdEhPUklaT05UQUxfTEFZT1VUOiBcIm1pbmVzd2VlcGVyLWhvcml6b250YWxfbGF5b3V0XCIsXG5cdFZFUlRJQ0FMX0xBWU9VVDogXCJtaW5lc3dlZXBlci12ZXJ0aWNhbF9sYXlvdXRcIixcblx0R0FNRU9WRVJfTEFZT1VUOiBcIm1pbmVzd2VlcGVyLWdhbWVvdmVyX2xheW91dFwiLFxuXHRHQU1FT1ZFUl9URVhUOiBcIm1pbmVzd2VlcGVyLWdhbWVvdmVyX3RleHRcIixcblx0VE9VQ0hfREVWSUNFX0xBWU9VVDogXCJtaW5lc3dlZXBlci10b3VjaF9kZXZpY2VfbGF5b3V0XCIsXG5cdFNPVVJDRV9MSU5LOiBcIm1pbmVzd2VlcGVyLXNvdXJjZV9saW5rXCJcbn0pOyJdfQ==
},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = new Flux.Dispatcher();
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvZGlzcGF0Y2hlci5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7cUJBQWUsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFBIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvZGlzcGF0Y2hlci5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBuZXcgRmx1eC5EaXNwYXRjaGVyOyJdfQ==
},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

exports["default"] = Enum;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _uuidEs6 = require("./uuid.es6");

var _uuidEs62 = _interopRequireDefault(_uuidEs6);

function Enum(template) {
	var _template = _slicedToArray(template, 1);

	var string = _template[0];

	var keys = string.trim().split(separator);
	var enumeration = Object.create(null);

	keys.forEach(fill, enumeration);

	return Object.freeze(enumeration);
}

;

var separator = /\s+|(\s*,\s*)/;

function fill(key) {
	this[key] = (0, _uuidEs62["default"])();
}
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvZW51bS5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBR3dCLElBQUk7Ozs7dUJBSFIsWUFBWTs7OztBQUdqQixTQUFTLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0NBQ3ZCLFFBQVE7O0tBQWxCLE1BQU07O0FBQ1gsS0FBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQyxLQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUV0QyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQzs7QUFFaEMsUUFBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQ2xDOztBQUFBLENBQUM7O0FBRUYsSUFBSSxTQUFTLEdBQUcsZUFBZSxDQUFDOztBQUVoQyxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDbEIsS0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLDJCQUFTLENBQUM7Q0FDdEIiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvbGlicy9lbnVtLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRVVUlEIGZyb20gXCIuL3V1aWQuZXM2XCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRW51bSh0ZW1wbGF0ZSkge1xuXHRsZXQgW3N0cmluZ10gPSB0ZW1wbGF0ZTtcblx0bGV0IGtleXMgPSBzdHJpbmcudHJpbSgpLnNwbGl0KHNlcGFyYXRvcik7XG5cdGxldCBlbnVtZXJhdGlvbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0a2V5cy5mb3JFYWNoKGZpbGwsIGVudW1lcmF0aW9uKTtcblxuXHRyZXR1cm4gT2JqZWN0LmZyZWV6ZShlbnVtZXJhdGlvbik7XG59O1xuXG5sZXQgc2VwYXJhdG9yID0gL1xccyt8KFxccyosXFxzKikvO1xuXG5mdW5jdGlvbiBmaWxsKGtleSkge1xuXHR0aGlzW2tleV0gPSBnZXRVVUlEKCk7XG59Il19
},{"./uuid.es6":10}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _templateObject = _taggedTemplateLiteral(["\n\t\tNOT_AVAILABLE\n\t\tSTANDBY\n\t\tPENDING\n\t\tPAUSED\n\t\tCOMPLETE\n\t"], ["\n\t\tNOT_AVAILABLE\n\t\tSTANDBY\n\t\tPENDING\n\t\tPAUSED\n\t\tCOMPLETE\n\t"]),
    _templateObject2 = _taggedTemplateLiteral(["\n\t\tNOT_AVAILABLE\n\t\tSUCCESS\n\t\tFAIL\n\t"], ["\n\t\tNOT_AVAILABLE\n\t\tSUCCESS\n\t\tFAIL\n\t"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _enumEs6 = require("./enum.es6");

var _enumEs62 = _interopRequireDefault(_enumEs6);

var random = function random(lim) {
	return Math.floor(Math.random() * (lim + 1));
};

var GameStatus = (0, _enumEs62["default"])(_templateObject);

exports.GameStatus = GameStatus;
var GameOverStatus = (0, _enumEs62["default"])(_templateObject2);

exports.GameOverStatus = GameOverStatus;

var Minesweeper = (function () {
	function Minesweeper() {
		_classCallCheck(this, Minesweeper);

		this.status = GameStatus.NOT_AVAILABLE;
		this.score = GameOverStatus.NOT_AVAILABLE;

		this.battlefield = null;
		this.mines = null;
		this.rows = null;
		this.columns = null;

		this._times = null;
		this._unchecked = null;
	}

	_createClass(Minesweeper, [{
		key: "initialize",
		value: function initialize(rows, columns, mines) {
			this.mines = mines;
			this.rows = rows;
			this.columns = columns;

			this.battlefield = new Battlefield(rows, columns);

			this._unchecked = rows * columns;
			this._times = [];

			this.score = GameOverStatus.NOT_AVAILABLE;
			this.status = GameStatus.STANDBY;
		}
	}, {
		key: "check",
		value: function check(row, column) {
			var _this = this;

			if (this.status == GameStatus.STANDBY) this._setUpBombs(row, column);

			if (this.status != GameStatus.PENDING) return;

			var item = this.battlefield.get(row, column);

			if (item.checked || item.hasFlag) return;

			item.checked = true;

			this._unchecked -= 1;

			if (this._unchecked <= this.mines) {
				this._gameComplete(GameOverStatus.SUCCESS);
			}

			if (item.hasMine) {
				item.blowUp = true;

				this._gameComplete(GameOverStatus.FAIL);
			} else {
				(function () {
					var arroundMinesCount = 0;
					var checkItem = function checkItem(item) {
						if (item.hasMine) arroundMinesCount++;
					};

					_this._forAllArround(row, column, checkItem);

					item.minesArround = arroundMinesCount;

					if (item.minesArround == 0) {
						var _checkItem = function _checkItem(item) {
							_this.check(item.row, item.column);
						};

						_this._forAllArround(row, column, _checkItem);
					}
				})();
			}
		}
	}, {
		key: "setFlag",
		value: function setFlag(row, column) {
			var item = this.battlefield.get(row, column);

			if (item.checked) return;

			item.hasFlag = !item.hasFlag;
		}
	}, {
		key: "checkAllArroundMinesFlagged",
		value: function checkAllArroundMinesFlagged(row, column) {
			var _this2 = this;

			if (this.status != GameStatus.PENDING) return;

			var item = this.battlefield.get(row, column);

			if (item.checked && item.minesArround) {
				(function () {
					var count = 0;
					var flagChecker = function flagChecker(item) {
						if (item.hasFlag) count++;
					};

					_this2._forAllArround(row, column, flagChecker);

					if (item.minesArround == count) {
						var checkCell = function checkCell(item) {
							if (item.checked) return;
							if (item.hasMine && item.hasFlag) return;

							_this2.check(item.row, item.column);
						};

						_this2._forAllArround(row, column, checkCell);
					}
				})();
			}
		}
	}, {
		key: "pause",
		value: function pause() {
			if (this.status != GameStatus.PENDING) return;

			this.status = GameStatus.PAUSED;
			this._times.push(new Date());
		}
	}, {
		key: "resume",
		value: function resume() {
			if (this.status != GameStatus.PAUSED) return;

			this.status = GameStatus.PENDING;
			this._times.push(new Date());
		}
	}, {
		key: "getGameTime",
		value: function getGameTime() {
			if (!this._times || this._times.length == 0) return { seconds: 0, milliseconds: 0 };

			var time = 0;
			var times = this._times;

			for (var i = 0, lim = times.length; i < lim; i += 2) {
				var startTime = times[i];
				var endTime = times[i + 1] || new Date();
				time += endTime - startTime;
			}

			var milliseconds = time % 1000;
			var seconds = (time - milliseconds) / 1000;

			return { seconds: seconds, milliseconds: milliseconds };
		}
	}, {
		key: "_setUpBombs",
		value: function _setUpBombs(row, column) {
			var mines = 0;

			while (mines < this.mines) {
				var i = random(+this.rows - 1);
				var j = random(+this.columns - 1);

				if (i == row && j == column) continue;

				var item = this.battlefield.get(i, j);

				if (item.hasMine) continue;

				item.hasMine = true;

				mines++;
			}

			this._times.push(new Date());
			this.status = GameStatus.PENDING;
		}
	}, {
		key: "_forAllArround",
		value: function _forAllArround(row, column, callback) {
			var _this3 = this;

			var invokeIfExists = function invokeIfExists(row, column) {
				var item = _this3.battlefield.get(row, column);
				if (item) callback(item);
			};

			invokeIfExists(row - 1, column - 1);
			invokeIfExists(row - 1, column);
			invokeIfExists(row - 1, column + 1);

			invokeIfExists(row, column - 1);
			invokeIfExists(row, column);
			invokeIfExists(row, column + 1);

			invokeIfExists(row + 1, column - 1);
			invokeIfExists(row + 1, column);
			invokeIfExists(row + 1, column + 1);
		}
	}, {
		key: "_gameComplete",
		value: function _gameComplete(score) {
			for (var row = 0; row < this.rows; row++) {
				for (var column = 0; column < this.columns; column++) {
					var item = this.battlefield.get(row, column);

					if (item.checked || item.hasFlag) continue;

					// TODO bugfix: открываются не все клетки
					if (item.hasMine) {
						item.checked = true;
					}
				}
			}

			this.score = score;
			this.status = GameStatus.COMPLETE;
		}
	}]);

	return Minesweeper;
})();

exports.Minesweeper = Minesweeper;

var Battlefield = (function () {
	function Battlefield(rows, columns) {
		_classCallCheck(this, Battlefield);

		this.grid = [];

		for (var row = 0; row < rows; row++) {
			this.grid[row] = [];

			for (var column = 0; column < columns; column++) {
				this.grid[row][column] = {
					row: row, column: column,
					checked: false,
					hasMine: false,
					hasFlag: false,
					minesArround: 0,
					blowUp: false
				};
			}
		}
	}

	_createClass(Battlefield, [{
		key: "get",
		value: function get(row, column) {
			var line = this.grid[row];

			return line ? line[column] : null;
		}
	}, {
		key: "set",
		value: function set(row, column, value) {
			this.grid[row][column] = value;
		}
	}, {
		key: "forAllArround",
		value: function forAllArround(row, column, callback) {
			var _this4 = this;

			var invokeIfExists = function invokeIfExists(row, column) {
				var item = _this4.get(row, column);
				if (item) callback(item);
			};

			invokeIfExists(row - 1, column - 1);
			invokeIfExists(row - 1, column);
			invokeIfExists(row - 1, column + 1);

			invokeIfExists(row, column - 1);
			invokeIfExists(row, column);
			invokeIfExists(row, column + 1);

			invokeIfExists(row + 1, column - 1);
			invokeIfExists(row + 1, column);
			invokeIfExists(row + 1, column + 1);
		}
	}]);

	return Battlefield;
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvbWluZXN3ZWVwZXIuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQUFpQixZQUFZOzs7O0FBRzdCLElBQUksTUFBTSxHQUFHLFNBQVQsTUFBTSxDQUFHLEdBQUc7UUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBQztDQUFBLENBQUM7O0FBR25ELElBQU0sVUFBVSw2Q0FPckIsQ0FBQTs7O0FBRUssSUFBTSxjQUFjLDhDQUt6QixDQUFBOzs7O0lBRVcsV0FBVztBQUNaLFVBREMsV0FBVyxHQUNUO3dCQURGLFdBQVc7O0FBRXRCLE1BQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUN2QyxNQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUM7O0FBRTFDLE1BQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLE1BQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE1BQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDOztBQUVwQixNQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUNuQixNQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztFQUN2Qjs7Y0FaVyxXQUFXOztTQWNiLG9CQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ2hDLE9BQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLE9BQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE9BQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUV2QixPQUFJLENBQUMsV0FBVyxHQUFHLElBQUks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O0FBRXBDLGlCQUFjLENBQUMsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoQyxpQkFBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1QixpQkFBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0FBRWhDLGlCQUFjLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEMsaUJBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLGlCQUFjLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDcEM7OztRQS9DSSxXQUFXIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvbWluZXN3ZWVwZXIuZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVudW0gZnJvbSBcIi4vZW51bS5lczZcIjtcblxuXG5sZXQgcmFuZG9tID0gbGltID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChsaW0gKyAxKSk7XG5cblxuZXhwb3J0IGNvbnN0IEdhbWVTdGF0dXMgPVxuXHRFbnVtIGBcblx0XHROT1RfQVZBSUxBQkxFXG5cdFx0U1RBTkRCWVxuXHRcdFBFTkRJTkdcblx0XHRQQVVTRURcblx0XHRDT01QTEVURVxuXHRgXG5cbmV4cG9ydCBjb25zdCBHYW1lT3ZlclN0YXR1cyA9XG5cdEVudW0gYFxuXHRcdE5PVF9BVkFJTEFCTEVcblx0XHRTVUNDRVNTXG5cdFx0RkFJTFxuXHRgXG5cbmV4cG9ydCBjbGFzcyBNaW5lc3dlZXBlciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuc3RhdHVzID0gR2FtZVN0YXR1cy5OT1RfQVZBSUxBQkxFO1xuXHRcdHRoaXMuc2NvcmUgPSBHYW1lT3ZlclN0YXR1cy5OT1RfQVZBSUxBQkxFO1xuXG5cdFx0dGhpcy5iYXR0bGVmaWVsZCA9IG51bGw7XG5cdFx0dGhpcy5taW5lcyA9IG51bGw7XG5cdFx0dGhpcy5yb3dzID0gbnVsbDtcblx0XHR0aGlzLmNvbHVtbnMgPSBudWxsO1xuXG5cdFx0dGhpcy5fdGltZXMgPSBudWxsO1xuXHRcdHRoaXMuX3VuY2hlY2tlZCA9IG51bGw7XG5cdH1cblxuXHRpbml0aWFsaXplKHJvd3MsIGNvbHVtbnMsIG1pbmVzKSB7XG5cdFx0dGhpcy5taW5lcyA9IG1pbmVzO1xuXHRcdHRoaXMucm93cyA9IHJvd3M7XG5cdFx0dGhpcy5jb2x1bW5zID0gY29sdW1ucztcblxuXHRcdHRoaXMuYmF0dGxlZmllbGQgPSBuZXcgQmF0dGxlZmllbGQocm93cywgY29sdW1ucyk7XG5cblx0XHR0aGlzLl91bmNoZWNrZWQgPSByb3dzICogY29sdW1ucztcblx0XHR0aGlzLl90aW1lcyA9IFtdO1xuXG5cdFx0dGhpcy5zY29yZSA9IEdhbWVPdmVyU3RhdHVzLk5PVF9BVkFJTEFCTEU7XG5cdFx0dGhpcy5zdGF0dXMgPSBHYW1lU3RhdHVzLlNUQU5EQlk7XG5cdH1cblxuXHRjaGVjayhyb3csIGNvbHVtbikge1xuXHRcdGlmICh0aGlzLnN0YXR1cyA9PSBHYW1lU3RhdHVzLlNUQU5EQlkpXG5cdFx0XHR0aGlzLl9zZXRVcEJvbWJzKHJvdywgY29sdW1uKTtcblxuXHRcdGlmICh0aGlzLnN0YXR1cyAhPSBHYW1lU3RhdHVzLlBFTkRJTkcpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRsZXQgaXRlbSA9IHRoaXMuYmF0dGxlZmllbGQuZ2V0KHJvdywgY29sdW1uKTtcblxuXHRcdGlmIChpdGVtLmNoZWNrZWQgfHwgaXRlbS5oYXNGbGFnKSByZXR1cm47XG5cblx0XHRpdGVtLmNoZWNrZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy5fdW5jaGVja2VkIC09IDE7XG5cblx0XHRpZiAodGhpcy5fdW5jaGVja2VkIDw9IHRoaXMubWluZXMpIHtcblx0XHRcdHRoaXMuX2dhbWVDb21wbGV0ZShHYW1lT3ZlclN0YXR1cy5TVUNDRVNTKTtcblx0XHR9XG5cblx0XHRpZiAoaXRlbS5oYXNNaW5lKSB7XG5cdFx0XHRpdGVtLmJsb3dVcCA9IHRydWU7XG5cblx0XHRcdHRoaXMuX2dhbWVDb21wbGV0ZShHYW1lT3ZlclN0YXR1cy5GQUlMKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGFycm91bmRNaW5lc0NvdW50ID0gMDtcblx0XHRcdGxldCBjaGVja0l0ZW0gPSBpdGVtID0+IHtcblx0XHRcdFx0aWYgKGl0ZW0uaGFzTWluZSkgYXJyb3VuZE1pbmVzQ291bnQrKztcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuX2ZvckFsbEFycm91bmQocm93LCBjb2x1bW4sIGNoZWNrSXRlbSk7XG5cblx0XHRcdGl0ZW0ubWluZXNBcnJvdW5kID0gYXJyb3VuZE1pbmVzQ291bnQ7XG5cblx0XHRcdGlmIChpdGVtLm1pbmVzQXJyb3VuZCA9PSAwKSB7XG5cdFx0XHRcdGxldCBjaGVja0l0ZW0gPSBpdGVtID0+IHtcblx0XHRcdFx0XHR0aGlzLmNoZWNrKGl0ZW0ucm93LCBpdGVtLmNvbHVtbik7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5fZm9yQWxsQXJyb3VuZChyb3csIGNvbHVtbiwgY2hlY2tJdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRzZXRGbGFnKHJvdywgY29sdW1uKSB7XG5cdFx0bGV0IGl0ZW0gPSB0aGlzLmJhdHRsZWZpZWxkLmdldChyb3csIGNvbHVtbik7XG5cblx0XHRpZiAoaXRlbS5jaGVja2VkKSByZXR1cm47XG5cdFx0XG5cdFx0aXRlbS5oYXNGbGFnID0gIWl0ZW0uaGFzRmxhZztcblx0fVxuXG5cdGNoZWNrQWxsQXJyb3VuZE1pbmVzRmxhZ2dlZChyb3csIGNvbHVtbikge1xuXHRcdGlmICh0aGlzLnN0YXR1cyAhPSBHYW1lU3RhdHVzLlBFTkRJTkcpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRsZXQgaXRlbSA9IHRoaXMuYmF0dGxlZmllbGQuZ2V0KHJvdywgY29sdW1uKTtcblxuXHRcdGlmIChpdGVtLmNoZWNrZWQgJiYgaXRlbS5taW5lc0Fycm91bmQpIHtcblx0XHRcdGxldCBjb3VudCA9IDA7XG5cdFx0XHRsZXQgZmxhZ0NoZWNrZXIgPSBpdGVtID0+IHtcblx0XHRcdFx0aWYgKGl0ZW0uaGFzRmxhZykgY291bnQrKztcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuX2ZvckFsbEFycm91bmQocm93LCBjb2x1bW4sIGZsYWdDaGVja2VyKTtcblxuXHRcdFx0aWYgKGl0ZW0ubWluZXNBcnJvdW5kID09IGNvdW50KSB7XG5cdFx0XHRcdGxldCBjaGVja0NlbGwgPSBpdGVtID0+IHtcblx0XHRcdFx0XHRpZiAoaXRlbS5jaGVja2VkKSByZXR1cm47XG5cdFx0XHRcdFx0aWYgKGl0ZW0uaGFzTWluZSAmJiBpdGVtLmhhc0ZsYWcpIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuY2hlY2soaXRlbS5yb3csIGl0ZW0uY29sdW1uKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLl9mb3JBbGxBcnJvdW5kKHJvdywgY29sdW1uLCBjaGVja0NlbGwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHBhdXNlKCkge1xuXHRcdGlmICh0aGlzLnN0YXR1cyAhPSBHYW1lU3RhdHVzLlBFTkRJTkcpXG5cdFx0XHRyZXR1cm47XG5cblx0XHR0aGlzLnN0YXR1cyA9IEdhbWVTdGF0dXMuUEFVU0VEO1xuXHRcdHRoaXMuX3RpbWVzLnB1c2gobmV3IERhdGUpO1xuXHR9XG5cblx0cmVzdW1lKCkge1xuXHRcdGlmICh0aGlzLnN0YXR1cyAhPSBHYW1lU3RhdHVzLlBBVVNFRClcblx0XHRcdHJldHVybjtcblxuXHRcdHRoaXMuc3RhdHVzID0gR2FtZVN0YXR1cy5QRU5ESU5HO1xuXHRcdHRoaXMuX3RpbWVzLnB1c2gobmV3IERhdGUpO1xuXHR9XG5cblx0Z2V0R2FtZVRpbWUoKSB7XG5cdFx0aWYgKCF0aGlzLl90aW1lcyB8fCB0aGlzLl90aW1lcy5sZW5ndGggPT0gMClcblx0XHRcdHJldHVybiB7IHNlY29uZHM6IDAsIG1pbGxpc2Vjb25kczogMCB9O1xuXG5cdFx0bGV0IHRpbWUgPSAwO1xuXHRcdGxldCB0aW1lcyA9IHRoaXMuX3RpbWVzO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDAsIGxpbSA9IHRpbWVzLmxlbmd0aDsgaSA8IGxpbTsgaSArPSAyKSB7XG5cdFx0XHRsZXQgc3RhcnRUaW1lID0gdGltZXNbaV07XG5cdFx0XHRsZXQgZW5kVGltZSA9IHRpbWVzW2kgKyAxXSB8fCBuZXcgRGF0ZTtcblx0XHRcdHRpbWUgKz0gZW5kVGltZSAtIHN0YXJ0VGltZTtcblx0XHR9XG5cblx0XHRsZXQgbWlsbGlzZWNvbmRzID0gdGltZSAlIDEwMDA7XG5cdFx0bGV0IHNlY29uZHMgPSAodGltZSAtIG1pbGxpc2Vjb25kcykgLyAxMDAwO1xuXG5cdFx0cmV0dXJuIHsgc2Vjb25kcywgbWlsbGlzZWNvbmRzIH07XG5cdH1cblxuXHRfc2V0VXBCb21icyhyb3csIGNvbHVtbikge1xuXHRcdGxldCBtaW5lcyA9IDA7XG5cblx0XHR3aGlsZSAobWluZXMgPCB0aGlzLm1pbmVzKSB7XG5cdFx0XHRsZXQgW2ksIGpdID0gW3JhbmRvbSgrdGhpcy5yb3dzIC0gMSksIHJhbmRvbSgrdGhpcy5jb2x1bW5zIC0gMSldO1xuXG5cdFx0XHRpZiAoaSA9PSByb3cgJiYgaiA9PSBjb2x1bW4pIGNvbnRpbnVlO1xuXG5cdFx0XHRsZXQgaXRlbSA9IHRoaXMuYmF0dGxlZmllbGQuZ2V0KGksIGopO1xuXG5cdFx0XHRpZiAoaXRlbS5oYXNNaW5lKSBjb250aW51ZTtcblxuXHRcdFx0aXRlbS5oYXNNaW5lID0gdHJ1ZTtcblxuXHRcdFx0bWluZXMrKztcblx0XHR9XG5cblx0XHR0aGlzLl90aW1lcy5wdXNoKG5ldyBEYXRlKTtcblx0XHR0aGlzLnN0YXR1cyA9IEdhbWVTdGF0dXMuUEVORElORztcblx0fVxuXG5cdF9mb3JBbGxBcnJvdW5kKHJvdywgY29sdW1uLCBjYWxsYmFjaykge1xuXHRcdGxldCBpbnZva2VJZkV4aXN0cyA9IChyb3csIGNvbHVtbikgPT4ge1xuXHRcdFx0bGV0IGl0ZW0gPSB0aGlzLmJhdHRsZWZpZWxkLmdldChyb3csIGNvbHVtbik7XG5cdFx0XHRpZiAoaXRlbSkgY2FsbGJhY2soaXRlbSk7XG5cdFx0fTtcblxuXHRcdGludm9rZUlmRXhpc3RzKHJvdyAtIDEsIGNvbHVtbiAtIDEpO1xuXHRcdGludm9rZUlmRXhpc3RzKHJvdyAtIDEsIGNvbHVtbik7XG5cdFx0aW52b2tlSWZFeGlzdHMocm93IC0gMSwgY29sdW1uICsgMSk7XG5cblx0XHRpbnZva2VJZkV4aXN0cyhyb3csIGNvbHVtbiAtIDEpO1xuXHRcdGludm9rZUlmRXhpc3RzKHJvdywgY29sdW1uKTtcblx0XHRpbnZva2VJZkV4aXN0cyhyb3csIGNvbHVtbiArIDEpO1xuXG5cdFx0aW52b2tlSWZFeGlzdHMocm93ICsgMSwgY29sdW1uIC0gMSk7XG5cdFx0aW52b2tlSWZFeGlzdHMocm93ICsgMSwgY29sdW1uKTtcblx0XHRpbnZva2VJZkV4aXN0cyhyb3cgKyAxLCBjb2x1bW4gKyAxKTtcblx0fVxuXG5cdF9nYW1lQ29tcGxldGUoc2NvcmUpIHtcblx0XHRmb3IgKGxldCByb3cgPSAwOyByb3cgPCB0aGlzLnJvd3M7IHJvdysrKSB7XG5cdFx0XHRmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCB0aGlzLmNvbHVtbnM7IGNvbHVtbisrKSB7XG5cdFx0XHRcdGxldCBpdGVtID0gdGhpcy5iYXR0bGVmaWVsZC5nZXQocm93LCBjb2x1bW4pO1xuXG5cdFx0XHRcdGlmIChpdGVtLmNoZWNrZWQgfHwgaXRlbS5oYXNGbGFnKSBjb250aW51ZTtcblxuXHRcdFx0XHQvLyBUT0RPIGJ1Z2ZpeDog0L7RgtC60YDRi9Cy0LDRjtGC0YHRjyDQvdC1INCy0YHQtSDQutC70LXRgtC60Lhcblx0XHRcdFx0aWYgKGl0ZW0uaGFzTWluZSkge1xuXHRcdFx0XHRcdGl0ZW0uY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNjb3JlID0gc2NvcmU7XG5cdFx0dGhpcy5zdGF0dXMgPSBHYW1lU3RhdHVzLkNPTVBMRVRFO1xuXHR9XG59XG5cbmNsYXNzIEJhdHRsZWZpZWxkIHtcblx0Y29uc3RydWN0b3Iocm93cywgY29sdW1ucykge1xuXHRcdHRoaXMuZ3JpZCA9IFtdO1xuXG5cdFx0Zm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcblx0XHRcdHRoaXMuZ3JpZFtyb3ddID0gW107XG5cblx0XHRcdGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IGNvbHVtbnM7IGNvbHVtbisrKSB7XG5cdFx0XHRcdHRoaXMuZ3JpZFtyb3ddW2NvbHVtbl0gPSB7XG5cdFx0XHRcdFx0cm93LCBjb2x1bW4sXG5cdFx0XHRcdFx0Y2hlY2tlZDogZmFsc2UsXG5cdFx0XHRcdFx0aGFzTWluZTogZmFsc2UsXG5cdFx0XHRcdFx0aGFzRmxhZzogZmFsc2UsXG5cdFx0XHRcdFx0bWluZXNBcnJvdW5kOiAwLFxuXHRcdFx0XHRcdGJsb3dVcDogZmFsc2Vcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQocm93LCBjb2x1bW4pIHtcblx0XHRsZXQgbGluZSA9IHRoaXMuZ3JpZFtyb3ddO1xuXG5cdFx0cmV0dXJuIGxpbmUgPyBsaW5lW2NvbHVtbl0gOiBudWxsO1xuXHR9XG5cblx0c2V0KHJvdywgY29sdW1uLCB2YWx1ZSkge1xuXHRcdHRoaXMuZ3JpZFtyb3ddW2NvbHVtbl0gPSB2YWx1ZTtcblx0fVxuXHRcblx0Zm9yQWxsQXJyb3VuZChyb3csIGNvbHVtbiwgY2FsbGJhY2spIHtcblx0XHRsZXQgaW52b2tlSWZFeGlzdHMgPSAocm93LCBjb2x1bW4pID0+IHtcblx0XHRcdGxldCBpdGVtID0gdGhpcy5nZXQocm93LCBjb2x1bW4pO1xuXHRcdFx0aWYgKGl0ZW0pIGNhbGxiYWNrKGl0ZW0pO1xuXHRcdH07XG5cblx0XHRpbnZva2VJZkV4aXN0cyhyb3cgLSAxLCBjb2x1bW4gLSAxKTtcblx0XHRpbnZva2VJZkV4aXN0cyhyb3cgLSAxLCBjb2x1bW4pO1xuXHRcdGludm9rZUlmRXhpc3RzKHJvdyAtIDEsIGNvbHVtbiArIDEpO1xuXG5cdFx0aW52b2tlSWZFeGlzdHMocm93LCBjb2x1bW4gLSAxKTtcblx0XHRpbnZva2VJZkV4aXN0cyhyb3csIGNvbHVtbik7XG5cdFx0aW52b2tlSWZFeGlzdHMocm93LCBjb2x1bW4gKyAxKTtcblxuXHRcdGludm9rZUlmRXhpc3RzKHJvdyArIDEsIGNvbHVtbiAtIDEpO1xuXHRcdGludm9rZUlmRXhpc3RzKHJvdyArIDEsIGNvbHVtbik7XG5cdFx0aW52b2tlSWZFeGlzdHMocm93ICsgMSwgY29sdW1uICsgMSk7XG5cdH1cbn0iXX0=
},{"./enum.es6":7}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _dispatcherEs6 = require("./dispatcher.es6");

var _dispatcherEs62 = _interopRequireDefault(_dispatcherEs6);

var Store = (function () {
	function Store() {
		_classCallCheck(this, Store);

		this.payload = null;
		this._listeners = [];

		this.id = _dispatcherEs62["default"].register(this.update.bind(this));
	}

	_createClass(Store, [{
		key: "addListener",
		value: function addListener(handler) {
			this._listeners.push(handler);
		}
	}, {
		key: "removeListener",
		value: function removeListener(handler) {
			var index = this._listeners.indexOf(handler);

			if (index != -1) {
				this._listeners.splice(index, 1);
			}
		}
	}, {
		key: "waitFor",
		value: function waitFor() {
			for (var _len = arguments.length, stores = Array(_len), _key = 0; _key < _len; _key++) {
				stores[_key] = arguments[_key];
			}

			var ids = stores.map(function (store) {
				return store.id;
			});

			_dispatcherEs62["default"].waitFor(ids);
		}
	}, {
		key: "update",
		value: function update() {
			this.updatePayload();

			var payload = this.getPayload();

			this._listeners.forEach(function (handler) {
				return handler(payload);
			});
		}
	}, {
		key: "updatePayload",
		value: function updatePayload() {}
	}, {
		key: "getPayload",
		value: function getPayload() {
			return this.payload;
		}
	}]);

	return Store;
})();

exports["default"] = Store;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvc3RvcmUuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs2QkFBdUIsa0JBQWtCOzs7O0lBR3BCLEtBQUs7QUFDZCxVQURTLEtBQUssR0FDWDt3QkFETSxLQUFLOztBQUV4QixNQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNwQixNQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFckIsTUFBSSxDQUFDLEVBQUUsR0FBRywyQkFBVyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN0RDs7Y0FObUIsS0FBSzs7U0FRZCxxQkFBQyxPQUFPLEVBQUU7QUFDcEIsT0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDOUI7OztTQUVhLHdCQUFDLE9BQU8sRUFBRTtBQUN2QixPQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFN0MsT0FBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDaEIsUUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pDO0dBQ0Q7OztTQUVNLG1CQUFZO3FDQUFSLE1BQU07QUFBTixVQUFNOzs7QUFDaEIsT0FBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUs7V0FBSSxLQUFLLENBQUMsRUFBRTtJQUFBLENBQUMsQ0FBQzs7QUFFeEMsOEJBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCOzs7U0FFSyxrQkFBRztBQUNSLE9BQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzs7QUFFckIsT0FBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDOztBQUVoQyxPQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87V0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0dBQ3JEOzs7U0FFWSx5QkFBRyxFQUFHOzs7U0FFVCxzQkFBRztBQUNaLFVBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNwQjs7O1FBdENtQixLQUFLOzs7cUJBQUwsS0FBSyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy9saWJzL3N0b3JlLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkaXNwYXRjaGVyIGZyb20gXCIuL2Rpc3BhdGNoZXIuZXM2XCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnBheWxvYWQgPSBudWxsO1xuXHRcdHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuXG5cdFx0dGhpcy5pZCA9IGRpc3BhdGNoZXIucmVnaXN0ZXIodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRhZGRMaXN0ZW5lcihoYW5kbGVyKSB7XG5cdFx0dGhpcy5fbGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG5cdH1cblxuXHRyZW1vdmVMaXN0ZW5lcihoYW5kbGVyKSB7XG5cdFx0bGV0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cblx0XHRpZiAoaW5kZXggIT0gLTEpIHtcblx0XHRcdHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXG5cdHdhaXRGb3IoLi4uc3RvcmVzKSB7XG5cdFx0bGV0IGlkcyA9IHN0b3Jlcy5tYXAoc3RvcmUgPT4gc3RvcmUuaWQpO1xuXHRcdFxuXHRcdGRpc3BhdGNoZXIud2FpdEZvcihpZHMpO1xuXHR9XG5cblx0dXBkYXRlKCkge1xuXHRcdHRoaXMudXBkYXRlUGF5bG9hZCgpO1xuXG5cdFx0bGV0IHBheWxvYWQgPSB0aGlzLmdldFBheWxvYWQoKTtcblxuXHRcdHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlcihwYXlsb2FkKSk7XG5cdH1cblxuXHR1cGRhdGVQYXlsb2FkKCkgeyB9XG5cblx0Z2V0UGF5bG9hZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXlsb2FkO1xuXHR9XG59Il19
},{"./dispatcher.es6":6}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports["default"] = function () {
	return hex(8) + "-" + hex(4) + "-" + hex(4) + "-" + hex(4) + "-" + hex(12);
};

function hex(count) {
	var hexString = Math.random().toString(16).substring(2);
	var length = hexString.length;

	if (count > length) return hexString + hex(count - length);

	return hexString.substring(0, count);
}
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL2xpYnMvdXVpZC5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3FCQUFlO1FBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7Q0FBRzs7QUFFbkYsU0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFO0FBQ25CLEtBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELEtBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7O0FBRTlCLEtBQUksS0FBSyxHQUFHLE1BQU0sRUFDakIsT0FBTyxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQzs7QUFFeEMsUUFBTyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNyQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy9saWJzL3V1aWQuZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgKCkgPT4gYCR7IGhleCg4KSB9LSR7IGhleCg0KSB9LSR7IGhleCg0KSB9LSR7IGhleCg0KSB9LSR7IGhleCgxMikgfWA7XG5cbmZ1bmN0aW9uIGhleChjb3VudCkge1xuXHRsZXQgaGV4U3RyaW5nID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDIpO1xuXHRsZXQgbGVuZ3RoID0gaGV4U3RyaW5nLmxlbmd0aDtcblxuXHRpZiAoY291bnQgPiBsZW5ndGgpXG5cdFx0cmV0dXJuIGhleFN0cmluZyArIGhleChjb3VudCAtIGxlbmd0aCk7XG5cblx0cmV0dXJuIGhleFN0cmluZy5zdWJzdHJpbmcoMCwgY291bnQpO1xufSJdfQ==
},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _templateObject = _taggedTemplateLiteral(["MENU, GAME, TOUCH_DEVICE"], ["MENU, GAME, TOUCH_DEVICE"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libsStoreEs6 = require("../libs/store.es6");

var _libsStoreEs62 = _interopRequireDefault(_libsStoreEs6);

var _gameplay_storeEs6 = require("./gameplay_store.es6");

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var _actionsGameplay_actionsEs6 = require("../actions/gameplay_actions.es6");

var _libsEnumEs6 = require("../libs/enum.es6");

var _libsEnumEs62 = _interopRequireDefault(_libsEnumEs6);

var AppStoreClass = (function (_Store) {
	_inherits(AppStoreClass, _Store);

	function AppStoreClass() {
		_classCallCheck(this, AppStoreClass);

		_get(Object.getPrototypeOf(AppStoreClass.prototype), "constructor", this).call(this);

		this.payload = {
			layout: "ontouchstart" in document ? Layouts.TOUCH_DEVICE : Layouts.MENU,
			difficult: null,
			gameInProcess: false
		};
	}

	_createClass(AppStoreClass, [{
		key: "update",
		value: function update(action) {
			this.waitFor(_gameplay_storeEs6.gameplayStore);

			switch (action.type) {
				case _actionsApp_actionsEs6.appActions.START_GAME:
					this.payload.layout = Layouts.GAME;
					this.payload.difficult = action.difficult;
					this.payload.gameInProcess = true;
					break;

				case _actionsApp_actionsEs6.appActions.CONTINUE_GAME:
					this.payload.layout = Layouts.GAME;
					this.payload.gameInProcess = true;
					break;

				case _actionsApp_actionsEs6.appActions.TO_MAIN_MENU:
					this.payload.layout = Layouts.MENU;
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_CELL:
				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_ALL_ARROUND_MINES_FLAGGED:
					var status = _gameplay_storeEs6.gameplayStore.getPayload().status;

					if (status == _gameplay_storeEs6.GameStatus.COMPLETE) {
						this.payload.gameInProcess = false;
					}
					break;

				default:
					return;
			}

			_get(Object.getPrototypeOf(AppStoreClass.prototype), "update", this).call(this);
		}
	}]);

	return AppStoreClass;
})(_libsStoreEs62["default"]);

var Layouts = (0, _libsEnumEs62["default"])(_templateObject);

exports.Layouts = Layouts;
var appStore = new AppStoreClass();
exports.appStore = appStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3N0b3Jlcy9hcHBfc3RvcmUuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUFrQixtQkFBbUI7Ozs7aUNBQ0ssc0JBQXNCOztxQ0FDckMsNEJBQTRCOzswQ0FDdkIsaUNBQWlDOzsyQkFDaEQsa0JBQWtCOzs7O0lBRzdCLGFBQWE7V0FBYixhQUFhOztBQUNQLFVBRE4sYUFBYSxHQUNKO3dCQURULGFBQWE7O0FBRWpCLDZCQUZJLGFBQWEsNkNBRVQ7O0FBRVIsTUFBSSxDQUFDLE9BQU8sR0FBRztBQUNkLFNBQU0sRUFBRSxjQUFjLElBQUksUUFBUSxHQUNqQyxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJO0FBQ3BDLFlBQVMsRUFBRSxJQUFJO0FBQ2YsZ0JBQWEsRUFBRSxLQUFLO0dBQ3BCLENBQUM7RUFDRjs7Y0FWSSxhQUFhOztTQVlaLGdCQUFDLE1BQU0sRUFBRTtBQUNkLE9BQUksQ0FBQyxPQUFPLGtDQUFlLENBQUM7O0FBRTVCLFdBQVEsTUFBTSxDQUFDLElBQUk7QUFDbEIsU0FBSyxrQ0FBVyxVQUFVO0FBQ3pCLFNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDbkMsU0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUMxQyxTQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDbEMsV0FBTTs7QUFBQSxBQUVQLFNBQUssa0NBQVcsYUFBYTtBQUM1QixTQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ25DLFNBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztBQUNsQyxXQUFNOztBQUFBLEFBRVAsU0FBSyxrQ0FBVyxZQUFZO0FBQzNCLFNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDbkMsV0FBTTs7QUFBQSxBQUVQLFNBQUssNENBQWdCLFVBQVUsQ0FBQztBQUNoQyxTQUFLLDRDQUFnQiwrQkFBK0I7QUFDbkQsU0FBSSxNQUFNLEdBQUcsaUNBQWMsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDOztBQUUvQyxTQUFJLE1BQU0sSUFBSSw4QkFBVyxRQUFRLEVBQUU7QUFDbEMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO01BQ25DO0FBQ0QsV0FBTTs7QUFBQSxBQUVQO0FBQVMsWUFBTztBQUFBLElBQ2hCOztBQUVELDhCQTNDSSxhQUFhLHdDQTJDRjtHQUNmOzs7UUE1Q0ksYUFBYTs7O0FBZ0RaLElBQU0sT0FBTyxpREFBa0MsQ0FBQTs7O0FBRS9DLElBQU0sUUFBUSxHQUFHLElBQUksYUFBYSxFQUFBLENBQUMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvc3RvcmVzL2FwcF9zdG9yZS5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RvcmUgZnJvbSBcIi4uL2xpYnMvc3RvcmUuZXM2XCI7XG5pbXBvcnQgeyBnYW1lcGxheVN0b3JlLCBHYW1lU3RhdHVzIH0gZnJvbSBcIi4vZ2FtZXBsYXlfc3RvcmUuZXM2XCI7XG5pbXBvcnQgeyBhcHBBY3Rpb25zIH0gZnJvbSBcIi4uL2FjdGlvbnMvYXBwX2FjdGlvbnMuZXM2XCI7XG5pbXBvcnQgeyBnYW1lcGxheUFjdGlvbnMgfSBmcm9tIFwiLi4vYWN0aW9ucy9nYW1lcGxheV9hY3Rpb25zLmVzNlwiO1xuaW1wb3J0IEVudW0gZnJvbSBcIi4uL2xpYnMvZW51bS5lczZcIjtcblxuXG5jbGFzcyBBcHBTdG9yZUNsYXNzIGV4dGVuZHMgU3RvcmUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5wYXlsb2FkID0ge1xuXHRcdFx0bGF5b3V0OiBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50ID9cblx0XHRcdFx0TGF5b3V0cy5UT1VDSF9ERVZJQ0UgOiBMYXlvdXRzLk1FTlUsXG5cdFx0XHRkaWZmaWN1bHQ6IG51bGwsXG5cdFx0XHRnYW1lSW5Qcm9jZXNzOiBmYWxzZVxuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUoYWN0aW9uKSB7XG5cdFx0dGhpcy53YWl0Rm9yKGdhbWVwbGF5U3RvcmUpO1xuXG5cdFx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdFx0Y2FzZSBhcHBBY3Rpb25zLlNUQVJUX0dBTUU6XG5cdFx0XHRcdHRoaXMucGF5bG9hZC5sYXlvdXQgPSBMYXlvdXRzLkdBTUU7XG5cdFx0XHRcdHRoaXMucGF5bG9hZC5kaWZmaWN1bHQgPSBhY3Rpb24uZGlmZmljdWx0O1xuXHRcdFx0XHR0aGlzLnBheWxvYWQuZ2FtZUluUHJvY2VzcyA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGFwcEFjdGlvbnMuQ09OVElOVUVfR0FNRTpcblx0XHRcdFx0dGhpcy5wYXlsb2FkLmxheW91dCA9IExheW91dHMuR0FNRTtcblx0XHRcdFx0dGhpcy5wYXlsb2FkLmdhbWVJblByb2Nlc3MgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBhcHBBY3Rpb25zLlRPX01BSU5fTUVOVTpcblx0XHRcdFx0dGhpcy5wYXlsb2FkLmxheW91dCA9IExheW91dHMuTUVOVTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgZ2FtZXBsYXlBY3Rpb25zLkNIRUNLX0NFTEw6XG5cdFx0XHRjYXNlIGdhbWVwbGF5QWN0aW9ucy5DSEVDS19BTExfQVJST1VORF9NSU5FU19GTEFHR0VEOlxuXHRcdFx0XHRsZXQgc3RhdHVzID0gZ2FtZXBsYXlTdG9yZS5nZXRQYXlsb2FkKCkuc3RhdHVzO1xuXG5cdFx0XHRcdGlmIChzdGF0dXMgPT0gR2FtZVN0YXR1cy5DT01QTEVURSkge1xuXHRcdFx0XHRcdHRoaXMucGF5bG9hZC5nYW1lSW5Qcm9jZXNzID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6IHJldHVybjtcblx0XHR9XG5cblx0XHRzdXBlci51cGRhdGUoKTtcblx0fVxufVxuXG5cbmV4cG9ydCBjb25zdCBMYXlvdXRzID0gRW51bSBgTUVOVSwgR0FNRSwgVE9VQ0hfREVWSUNFYFxuXG5leHBvcnQgY29uc3QgYXBwU3RvcmUgPSBuZXcgQXBwU3RvcmVDbGFzczsiXX0=
},{"../actions/app_actions.es6":1,"../actions/gameplay_actions.es6":2,"../libs/enum.es6":7,"../libs/store.es6":9,"./gameplay_store.es6":12}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _templateObject = _taggedTemplateLiteral(["EASY, NORMAL, HARD"], ["EASY, NORMAL, HARD"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libsStoreEs6 = require("../libs/store.es6");

var _libsStoreEs62 = _interopRequireDefault(_libsStoreEs6);

var _libsMinesweeperEs6 = require("../libs/minesweeper.es6");

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var _actionsGameplay_actionsEs6 = require("../actions/gameplay_actions.es6");

var _libsEnumEs6 = require("../libs/enum.es6");

var _libsEnumEs62 = _interopRequireDefault(_libsEnumEs6);

var GameplayStoreClass = (function (_Store) {
	_inherits(GameplayStoreClass, _Store);

	function GameplayStoreClass() {
		_classCallCheck(this, GameplayStoreClass);

		_get(Object.getPrototypeOf(GameplayStoreClass.prototype), "constructor", this).call(this);

		this.game = new _libsMinesweeperEs6.Minesweeper();
		this.payload = {
			rows: null,
			columns: null,
			mines: null,
			cells: null,
			status: this.game.status,
			score: this.game.score
		};
	}

	// re-export

	_createClass(GameplayStoreClass, [{
		key: "updatePayload",
		value: function updatePayload() {
			this.payload.status = this.game.status;
			this.payload.score = this.game.score;

			return _get(Object.getPrototypeOf(GameplayStoreClass.prototype), "updatePayload", this).call(this);
		}
	}, {
		key: "update",
		value: function update(action) {
			switch (action.type) {
				case _actionsApp_actionsEs6.appActions.START_GAME:
					if (action.difficult == Difficult.EASY) this._initialize(9, 9, 10);
					if (action.difficult == Difficult.NORMAL) this._initialize(16, 16, 40);
					if (action.difficult == Difficult.HARD) this._initialize(16, 30, 99);
					break;

				case _actionsApp_actionsEs6.appActions.RESTART_GAME:
					this._initialize(this.game.rows, this.game.columns, this.game.mines);
					break;

				case _actionsApp_actionsEs6.appActions.TO_MAIN_MENU:
					this.game.pause();
					break;

				case _actionsApp_actionsEs6.appActions.CONTINUE_GAME:
					this.game.resume();
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_CELL:
					this.game.check(action.row, action.column);

					if (this.game.score == _libsMinesweeperEs6.GameOverStatus.FAIL) {
						this.game.battlefield.get(action.row, action.column).blowUp = true;
					}

					break;

				case _actionsGameplay_actionsEs6.gameplayActions.SET_FLAG:
					this.game.setFlag(action.row, action.column);
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_ALL_ARROUND_MINES_FLAGGED:
					this.game.checkAllArroundMinesFlagged(action.row, action.column);
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.MARK_AREA:
					var callback = function callback(cell) {
						return cell.marked = true;
					};

					this.game.battlefield.forAllArround(action.row, action.column, callback);
				// there is NO break!!!
				case _actionsGameplay_actionsEs6.gameplayActions.MARK_CELL:
					var cell = this.game.battlefield.get(action.row, action.column);

					cell.marked = true;
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.UNMARK_AREA:
					var callback = function callback(cell) {
						return cell.marked = false;
					};

					this.game.battlefield.forAllArround(action.row, action.column, callback);
				// there is NO break!!!
				case _actionsGameplay_actionsEs6.gameplayActions.UNMARK_CELL:
					var cell = this.game.battlefield.get(action.row, action.column);

					cell.marked = false;
					break;

				default:
					return;
			}

			_get(Object.getPrototypeOf(GameplayStoreClass.prototype), "update", this).call(this);
		}
	}, {
		key: "getCell",
		value: function getCell(rows, columns) {
			return this.game.battlefield.get(rows, columns);
		}
	}, {
		key: "getGameTime",
		value: function getGameTime() {
			return this.game.getGameTime();
		}
	}, {
		key: "_initialize",
		value: function _initialize(rows, columns, mines) {
			this.game.initialize(rows, columns, mines);

			Object.assign(this.payload, {
				rows: rows, columns: columns, mines: mines,
				cells: this._getExtendedCells()
			});
		}
	}, {
		key: "_getExtendedCells",
		value: function _getExtendedCells() {
			var cells = [];

			for (var i = 0, lim = this.game.rows; i < lim; i++) {
				var row = [];

				for (var j = 0, _lim = this.game.columns; j < _lim; j++) {
					var originCell = this.game.battlefield.get(i, j);
					var augmentedCell = Object.assign(originCell, {
						marked: false
					});

					row.push(augmentedCell);
				}

				cells.push(row);
			}

			return cells;
		}
	}]);

	return GameplayStoreClass;
})(_libsStoreEs62["default"]);

Object.defineProperty(exports, "GameStatus", {
	enumerable: true,
	get: function get() {
		return _libsMinesweeperEs6.GameStatus;
	}
});
Object.defineProperty(exports, "GameOverStatus", {
	enumerable: true,
	get: function get() {
		return _libsMinesweeperEs6.GameOverStatus;
	}
});
var Difficult = (0, _libsEnumEs62["default"])(_templateObject);

exports.Difficult = Difficult;
var gameplayStore = new GameplayStoreClass();
exports.gameplayStore = gameplayStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../actions/app_actions.es6":1,"../actions/gameplay_actions.es6":2,"../libs/enum.es6":7,"../libs/minesweeper.es6":8,"../libs/store.es6":9}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsStoreEs6 = require("../libs/store.es6");

var _libsStoreEs62 = _interopRequireDefault(_libsStoreEs6);

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var _actionsGameplay_actionsEs6 = require("../actions/gameplay_actions.es6");

var _gameplay_storeEs6 = require("./gameplay_store.es6");

var MinesStoreClass = (function (_Store) {
	_inherits(MinesStoreClass, _Store);

	function MinesStoreClass() {
		_classCallCheck(this, MinesStoreClass);

		_get(Object.getPrototypeOf(MinesStoreClass.prototype), "constructor", this).call(this);

		this.payload = {
			mines: null
		};
	}

	_createClass(MinesStoreClass, [{
		key: "update",
		value: function update(action) {
			this.waitFor(_gameplay_storeEs6.gameplayStore);

			switch (action.type) {
				case _actionsApp_actionsEs6.appActions.START_GAME:
				case _actionsApp_actionsEs6.appActions.RESTART_GAME:
					this.payload.mines = _gameplay_storeEs6.gameplayStore.getPayload().mines;
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.SET_FLAG:
					var cell = _gameplay_storeEs6.gameplayStore.getCell(action.row, action.column);

					if (cell.checked) return;

					this.payload.mines = cell.hasFlag ? this.payload.mines - 1 : this.payload.mines + 1;
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_ALL_ARROUND_MINES_FLAGGED:
				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_CELL:
					if (_gameplay_storeEs6.gameplayStore.getPayload().status == _gameplay_storeEs6.GameStatus.COMPLETE) this.payload.mines = 0;
					break;

				default:
					return;
			}

			_get(Object.getPrototypeOf(MinesStoreClass.prototype), "update", this).call(this);
		}
	}]);

	return MinesStoreClass;
})(_libsStoreEs62["default"]);

exports["default"] = new MinesStoreClass();
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3N0b3Jlcy9taW5lc19zdG9yZS5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFBa0IsbUJBQW1COzs7O3FDQUNWLDRCQUE0Qjs7MENBQ3ZCLGlDQUFpQzs7aUNBQ3ZCLHNCQUFzQjs7SUFJMUQsZUFBZTtXQUFmLGVBQWU7O0FBQ1QsVUFETixlQUFlLEdBQ047d0JBRFQsZUFBZTs7QUFFbkIsNkJBRkksZUFBZSw2Q0FFWDs7QUFFUixNQUFJLENBQUMsT0FBTyxHQUFHO0FBQ2QsUUFBSyxFQUFFLElBQUk7R0FDWCxDQUFDO0VBQ0Y7O2NBUEksZUFBZTs7U0FTZCxnQkFBQyxNQUFNLEVBQUU7QUFDZCxPQUFJLENBQUMsT0FBTyxrQ0FBZSxDQUFDOztBQUU1QixXQUFRLE1BQU0sQ0FBQyxJQUFJO0FBQ2xCLFNBQUssa0NBQVcsVUFBVSxDQUFDO0FBQzNCLFNBQUssa0NBQVcsWUFBWTtBQUMzQixTQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxpQ0FBYyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDdEQsV0FBTTs7QUFBQSxBQUVQLFNBQUssNENBQWdCLFFBQVE7QUFDNUIsU0FBSSxJQUFJLEdBQUcsaUNBQWMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU1RCxTQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTzs7QUFFekIsU0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3BGLFdBQU07O0FBQUEsQUFFUCxTQUFLLDRDQUFnQiwrQkFBK0IsQ0FBQztBQUNyRCxTQUFLLDRDQUFnQixVQUFVO0FBQzlCLFNBQUksaUNBQWMsVUFBVSxFQUFFLENBQUMsTUFBTSxJQUFJLDhCQUFXLFFBQVEsRUFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLFdBQU07O0FBQUEsQUFFUDtBQUFTLFlBQU87QUFBQSxJQUNoQjs7QUFFRCw4QkFuQ0ksZUFBZSx3Q0FtQ0o7R0FDZjs7O1FBcENJLGVBQWU7OztxQkF3Q04sSUFBSSxlQUFlLEVBQUEiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvc3RvcmVzL21pbmVzX3N0b3JlLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdG9yZSBmcm9tIFwiLi4vbGlicy9zdG9yZS5lczZcIjtcbmltcG9ydCB7IGFwcEFjdGlvbnMgfSBmcm9tIFwiLi4vYWN0aW9ucy9hcHBfYWN0aW9ucy5lczZcIjtcbmltcG9ydCB7IGdhbWVwbGF5QWN0aW9ucyB9IGZyb20gXCIuLi9hY3Rpb25zL2dhbWVwbGF5X2FjdGlvbnMuZXM2XCI7XG5pbXBvcnQgeyBnYW1lcGxheVN0b3JlLCBHYW1lU3RhdHVzIH0gZnJvbSBcIi4vZ2FtZXBsYXlfc3RvcmUuZXM2XCI7XG5cblxuXG5jbGFzcyBNaW5lc1N0b3JlQ2xhc3MgZXh0ZW5kcyBTdG9yZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnBheWxvYWQgPSB7XG5cdFx0XHRtaW5lczogbnVsbFxuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUoYWN0aW9uKSB7XG5cdFx0dGhpcy53YWl0Rm9yKGdhbWVwbGF5U3RvcmUpO1xuXG5cdFx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdFx0Y2FzZSBhcHBBY3Rpb25zLlNUQVJUX0dBTUU6XHRcdFx0XG5cdFx0XHRjYXNlIGFwcEFjdGlvbnMuUkVTVEFSVF9HQU1FOlxuXHRcdFx0XHR0aGlzLnBheWxvYWQubWluZXMgPSBnYW1lcGxheVN0b3JlLmdldFBheWxvYWQoKS5taW5lcztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgZ2FtZXBsYXlBY3Rpb25zLlNFVF9GTEFHOlxuXHRcdFx0XHR2YXIgY2VsbCA9IGdhbWVwbGF5U3RvcmUuZ2V0Q2VsbChhY3Rpb24ucm93LCBhY3Rpb24uY29sdW1uKTtcblxuXHRcdFx0XHRpZiAoY2VsbC5jaGVja2VkKSByZXR1cm47XG5cblx0XHRcdFx0dGhpcy5wYXlsb2FkLm1pbmVzID0gY2VsbC5oYXNGbGFnID8gdGhpcy5wYXlsb2FkLm1pbmVzIC0gMSA6IHRoaXMucGF5bG9hZC5taW5lcyArIDE7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdhbWVwbGF5QWN0aW9ucy5DSEVDS19BTExfQVJST1VORF9NSU5FU19GTEFHR0VEOlxuXHRcdFx0Y2FzZSBnYW1lcGxheUFjdGlvbnMuQ0hFQ0tfQ0VMTDpcblx0XHRcdFx0aWYgKGdhbWVwbGF5U3RvcmUuZ2V0UGF5bG9hZCgpLnN0YXR1cyA9PSBHYW1lU3RhdHVzLkNPTVBMRVRFKVxuXHRcdFx0XHRcdHRoaXMucGF5bG9hZC5taW5lcyA9IDA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OiByZXR1cm47XG5cdFx0fVxuXG5cdFx0c3VwZXIudXBkYXRlKCk7XG5cdH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBuZXcgTWluZXNTdG9yZUNsYXNzOyJdfQ==
},{"../actions/app_actions.es6":1,"../actions/gameplay_actions.es6":2,"../libs/store.es6":9,"./gameplay_store.es6":12}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsStoreEs6 = require("../libs/store.es6");

var _libsStoreEs62 = _interopRequireDefault(_libsStoreEs6);

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var _actionsGameplay_actionsEs6 = require("../actions/gameplay_actions.es6");

var _gameplay_storeEs6 = require("./gameplay_store.es6");

var TimeStoreClass = (function (_Store) {
	_inherits(TimeStoreClass, _Store);

	function TimeStoreClass() {
		_classCallCheck(this, TimeStoreClass);

		_get(Object.getPrototypeOf(TimeStoreClass.prototype), "constructor", this).call(this);

		this.payload = {
			time: 0,
			delay: 0,
			isRunning: false
		};
	}

	_createClass(TimeStoreClass, [{
		key: "updatePayload",
		value: function updatePayload() {
			var time = _gameplay_storeEs6.gameplayStore.getGameTime();

			this.payload.time = time.seconds;
			this.payload.delay = time.milliseconds;
			this.payload.isRunning = _gameplay_storeEs6.gameplayStore.getPayload().status == _gameplay_storeEs6.GameStatus.PENDING;

			return _get(Object.getPrototypeOf(TimeStoreClass.prototype), "updatePayload", this).call(this);
		}
	}, {
		key: "update",
		value: function update(action) {
			this.waitFor(_gameplay_storeEs6.gameplayStore);

			switch (action.type) {
				case _actionsApp_actionsEs6.appActions.START_GAME:
				case _actionsApp_actionsEs6.appActions.RESTART_GAME:
				case _actionsApp_actionsEs6.appActions.TO_MAIN_MENU:
				case _actionsApp_actionsEs6.appActions.CONTINUE_GAME:
					break;

				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_ALL_ARROUND_MINES_FLAGGED:
				case _actionsGameplay_actionsEs6.gameplayActions.CHECK_CELL:
					if (this.payload.isRunning && _gameplay_storeEs6.gameplayStore.getPayload().status != _gameplay_storeEs6.GameStatus.COMPLETE) return;
					break;

				default:
					return;
			}

			_get(Object.getPrototypeOf(TimeStoreClass.prototype), "update", this).call(this);
		}
	}]);

	return TimeStoreClass;
})(_libsStoreEs62["default"]);

exports["default"] = new TimeStoreClass();
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3N0b3Jlcy90aW1lX3N0b3JlLmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OzRCQUFrQixtQkFBbUI7Ozs7cUNBQ1YsNEJBQTRCOzswQ0FDdkIsaUNBQWlDOztpQ0FDdkIsc0JBQXNCOztJQUkxRCxjQUFjO1dBQWQsY0FBYzs7QUFDUixVQUROLGNBQWMsR0FDTDt3QkFEVCxjQUFjOztBQUVsQiw2QkFGSSxjQUFjLDZDQUVWOztBQUVSLE1BQUksQ0FBQyxPQUFPLEdBQUc7QUFDZCxPQUFJLEVBQUUsQ0FBQztBQUNQLFFBQUssRUFBRSxDQUFDO0FBQ1IsWUFBUyxFQUFFLEtBQUs7R0FDaEIsQ0FBQztFQUNGOztjQVRJLGNBQWM7O1NBV04seUJBQUc7QUFDZixPQUFJLElBQUksR0FBRyxpQ0FBYyxXQUFXLEVBQUUsQ0FBQzs7QUFFdkMsT0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNqQyxPQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3ZDLE9BQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLGlDQUFjLFVBQVUsRUFBRSxDQUFDLE1BQU0sSUFBSSw4QkFBVyxPQUFPLENBQUM7O0FBRWpGLHFDQWxCSSxjQUFjLCtDQWtCVztHQUM3Qjs7O1NBRUssZ0JBQUMsTUFBTSxFQUFFO0FBQ2QsT0FBSSxDQUFDLE9BQU8sa0NBQWUsQ0FBQzs7QUFFNUIsV0FBUSxNQUFNLENBQUMsSUFBSTtBQUNsQixTQUFLLGtDQUFXLFVBQVUsQ0FBQztBQUMzQixTQUFLLGtDQUFXLFlBQVksQ0FBQztBQUM3QixTQUFLLGtDQUFXLFlBQVksQ0FBQztBQUM3QixTQUFLLGtDQUFXLGFBQWE7QUFDNUIsV0FBTTs7QUFBQSxBQUVQLFNBQUssNENBQWdCLCtCQUErQixDQUFDO0FBQ3JELFNBQUssNENBQWdCLFVBQVU7QUFDOUIsU0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxpQ0FBYyxVQUFVLEVBQUUsQ0FBQyxNQUFNLElBQUksOEJBQVcsUUFBUSxFQUNyRixPQUFPO0FBQ1IsV0FBTTs7QUFBQSxBQUVQO0FBQVMsWUFBTztBQUFBLElBQ2hCOztBQUVELDhCQXhDSSxjQUFjLHdDQXdDSDtHQUNmOzs7UUF6Q0ksY0FBYzs7O3FCQTZDTCxJQUFJLGNBQWMsRUFBQSIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy9zdG9yZXMvdGltZV9zdG9yZS5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RvcmUgZnJvbSBcIi4uL2xpYnMvc3RvcmUuZXM2XCI7XG5pbXBvcnQgeyBhcHBBY3Rpb25zIH0gZnJvbSBcIi4uL2FjdGlvbnMvYXBwX2FjdGlvbnMuZXM2XCI7XG5pbXBvcnQgeyBnYW1lcGxheUFjdGlvbnMgfSBmcm9tIFwiLi4vYWN0aW9ucy9nYW1lcGxheV9hY3Rpb25zLmVzNlwiO1xuaW1wb3J0IHsgZ2FtZXBsYXlTdG9yZSwgR2FtZVN0YXR1cyB9IGZyb20gXCIuL2dhbWVwbGF5X3N0b3JlLmVzNlwiO1xuXG5cblxuY2xhc3MgVGltZVN0b3JlQ2xhc3MgZXh0ZW5kcyBTdG9yZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnBheWxvYWQgPSB7XG5cdFx0XHR0aW1lOiAwLFxuXHRcdFx0ZGVsYXk6IDAsXG5cdFx0XHRpc1J1bm5pbmc6IGZhbHNlXG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZVBheWxvYWQoKSB7XG5cdFx0bGV0IHRpbWUgPSBnYW1lcGxheVN0b3JlLmdldEdhbWVUaW1lKCk7XG5cblx0XHR0aGlzLnBheWxvYWQudGltZSA9IHRpbWUuc2Vjb25kcztcblx0XHR0aGlzLnBheWxvYWQuZGVsYXkgPSB0aW1lLm1pbGxpc2Vjb25kcztcblx0XHR0aGlzLnBheWxvYWQuaXNSdW5uaW5nID0gZ2FtZXBsYXlTdG9yZS5nZXRQYXlsb2FkKCkuc3RhdHVzID09IEdhbWVTdGF0dXMuUEVORElORztcblxuXHRcdHJldHVybiBzdXBlci51cGRhdGVQYXlsb2FkKCk7XG5cdH1cblxuXHR1cGRhdGUoYWN0aW9uKSB7XG5cdFx0dGhpcy53YWl0Rm9yKGdhbWVwbGF5U3RvcmUpO1xuXG5cdFx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdFx0Y2FzZSBhcHBBY3Rpb25zLlNUQVJUX0dBTUU6XHRcdFx0XG5cdFx0XHRjYXNlIGFwcEFjdGlvbnMuUkVTVEFSVF9HQU1FOlxuXHRcdFx0Y2FzZSBhcHBBY3Rpb25zLlRPX01BSU5fTUVOVTpcblx0XHRcdGNhc2UgYXBwQWN0aW9ucy5DT05USU5VRV9HQU1FOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBnYW1lcGxheUFjdGlvbnMuQ0hFQ0tfQUxMX0FSUk9VTkRfTUlORVNfRkxBR0dFRDpcblx0XHRcdGNhc2UgZ2FtZXBsYXlBY3Rpb25zLkNIRUNLX0NFTEw6XG5cdFx0XHRcdGlmICh0aGlzLnBheWxvYWQuaXNSdW5uaW5nICYmIGdhbWVwbGF5U3RvcmUuZ2V0UGF5bG9hZCgpLnN0YXR1cyAhPSBHYW1lU3RhdHVzLkNPTVBMRVRFKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6IHJldHVybjtcblx0XHR9XG5cblx0XHRzdXBlci51cGRhdGUoKTtcblx0fVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUaW1lU3RvcmVDbGFzczsiXX0=
},{"../actions/app_actions.es6":1,"../actions/gameplay_actions.es6":2,"../libs/store.es6":9,"./gameplay_store.es6":12}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _templateObject = _taggedTemplateLiteral(["\n\t\tNO_ACTIONS\n\t\tCHECK_CELL\n\t\tSET_FLAG\n\t\tCHECK_ALL_ARROUND\n\t"], ["\n\t\tNO_ACTIONS\n\t\tCHECK_CELL\n\t\tSET_FLAG\n\t\tCHECK_ALL_ARROUND\n\t"]),
    _templateObject2 = _taggedTemplateLiteral(["\n\t\tNO_MARKS\n\t\tMARKED_CELL\n\t\tMARKED_AREA\n\t"], ["\n\t\tNO_MARKS\n\t\tMARKED_CELL\n\t\tMARKED_AREA\n\t"]);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libsControllerViewEs6 = require("../libs/controller-view.es6");

var _libsControllerViewEs62 = _interopRequireDefault(_libsControllerViewEs6);

var _cellEs6 = require("./cell.es6");

var _storesGameplay_storeEs6 = require("../stores/gameplay_store.es6");

var _actionsGameplay_actionsEs6 = require("../actions/gameplay_actions.es6");

var Actions = _interopRequireWildcard(_actionsGameplay_actionsEs6);

var _libsEnumEs6 = require("../libs/enum.es6");

var _libsEnumEs62 = _interopRequireDefault(_libsEnumEs6);

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var MouseButton = {
	LEFT: 0x00,
	MIDDLE: 0x01,
	RIGHT: 0x02
};

var MouseButtonMap = new Map();

MouseButtonMap.set(MouseButton.LEFT, "LEFT");
MouseButtonMap.set(MouseButton.MIDDLE, "MIDDLE");
MouseButtonMap.set(MouseButton.RIGHT, "RIGHT");

var MouseButtonsComplex = {
	UNPRESSED: 0,
	LEFT: 1,
	MIDDLE: 2,
	RIGHT: 4
};

var MouseEventType = {
	MOUSE_DOWN: "mousedown",
	MOUSE_UP: "mouseup"
};

var MouseState = (0, _libsEnumEs62["default"])(_templateObject);

var MarkedState = (0, _libsEnumEs62["default"])(_templateObject2);

var generateCellId = function generateCellId(row, column) {
	return "cell_" + row + "_" + column;
};

var Battlefield = (function (_ControllerView) {
	_inherits(Battlefield, _ControllerView);

	function Battlefield() {
		_classCallCheck(this, Battlefield);

		_get(Object.getPrototypeOf(Battlefield.prototype), "constructor", this).call(this, _storesGameplay_storeEs6.gameplayStore);

		this.eventHandlers = {
			onMouseDownCapture: this.mouseButtonsController.bind(this),
			onMouseDown: this.onMouseDown.bind(this),
			onMouseUpCapture: this.onMouseUp.bind(this),
			onMouseUp: this.mouseButtonsController.bind(this),
			onMouseLeave: this.onMouseLeave.bind(this)
		};

		this.mouseButtons = MouseButtonsComplex.UNPRESSED;
		this.mouseState = MouseState.NO_ACTIONS;
		this.markedState = MarkedState.NO_MARKS;

		this.currentCell = null;
		this.feedbacks = {
			setCurrentCell: this.setCurrentCell.bind(this)
		};
	}

	_createClass(Battlefield, [{
		key: "mouseButtonsController",
		value: function mouseButtonsController(event) {
			var mouseButtonAlies = MouseButtonMap.get(event.button);

			switch (event.type) {
				case MouseEventType.MOUSE_DOWN:
					this.mouseButtons |= MouseButtonsComplex[mouseButtonAlies];
					break;

				case MouseEventType.MOUSE_UP:
					if (this.mouseState == MouseState.NO_ACTIONS) break;

					this.mouseButtons ^= MouseButtonsComplex[mouseButtonAlies];
					break;
			}

			var leftAndRightButtonsPressed = this.mouseButtons & MouseButtonsComplex.LEFT && this.mouseButtons & MouseButtonsComplex.RIGHT;

			if (this.mouseButtons & MouseButtonsComplex.MIDDLE || leftAndRightButtonsPressed) {
				this.mouseState = MouseState.CHECK_ALL_ARROUND;
			} else if (this.mouseButtons & MouseButtonsComplex.LEFT) {
				this.mouseState = MouseState.CHECK_CELL;
			} else if (this.mouseButtons & MouseButtonsComplex.RIGHT) {
				this.mouseState = MouseState.SET_FLAG;
			} else {
				this.mouseState = MouseState.NO_ACTIONS;
			}
		}
	}, {
		key: "onMouseDown",
		value: function onMouseDown() {
			this.markCells();
		}
	}, {
		key: "onMouseUp",
		value: function onMouseUp() {
			this.unmarkCells();

			switch (this.mouseState) {
				case MouseState.CHECK_CELL:
					Actions.checkCell(this.currentCell.row, this.currentCell.column);
					break;

				case MouseState.SET_FLAG:
					Actions.setFlag(this.currentCell.row, this.currentCell.column);
					break;

				case MouseState.CHECK_ALL_ARROUND:
					Actions.checkAllArroundMinesFlagged(this.currentCell.row, this.currentCell.column);
					break;

				default:
					return;
			}

			this.resetMouseState();
		}
	}, {
		key: "onMouseLeave",
		value: function onMouseLeave() {
			this.unmarkCells();

			this.currentCell = null;
			this.resetMouseState();
		}
	}, {
		key: "setCurrentCell",
		value: function setCurrentCell(row, column) {
			this.unmarkCells();

			this.currentCell = { row: row, column: column };

			this.markCells();
		}
	}, {
		key: "markCells",
		value: function markCells() {
			if (this.currentCell) switch (this.mouseState) {
				case MouseState.CHECK_CELL:
					Actions.markCell(this.currentCell.row, this.currentCell.column);

					this.markedState = MarkedState.MARKED_CELL;
					break;

				case MouseState.CHECK_ALL_ARROUND:
					Actions.markArea(this.currentCell.row, this.currentCell.column);

					this.markedState = MarkedState.MARKED_AREA;
					break;
			}
		}
	}, {
		key: "unmarkCells",
		value: function unmarkCells() {
			switch (this.markedState) {
				case MarkedState.MARKED_CELL:
					Actions.unmarkCell(this.currentCell.row, this.currentCell.column);
					break;

				case MarkedState.MARKED_AREA:
					Actions.unmarkArea(this.currentCell.row, this.currentCell.column);
					break;
			}

			this.markedState = MarkedState.NO_MARKS;
		}
	}, {
		key: "resetMouseState",
		value: function resetMouseState() {
			this.mouseButtons = MouseButtonsComplex.UNPRESSED;
			this.mouseState = MouseState.NO_ACTIONS;
		}
	}, {
		key: "render",
		value: function render() {
			var rows = this.state.rows;
			var columns = this.state.columns;

			var cells = [];

			for (var row = 0; row < rows; row++) {
				for (var column = 0; column < columns; column++) {
					var settings = this.state.cells[row][column];
					var cell = React.createElement(_cellEs6.Cell, _extends({ key: generateCellId(row, column) }, settings, this.feedbacks));

					cells.push(cell);
				}
			}

			return React.createElement(
				"div",
				_extends({ className: _libsCssClassListEs62["default"].BATTLEFIELD, style: this.props.size }, this.eventHandlers),
				cells
			);
		}
	}]);

	return Battlefield;
})(_libsControllerViewEs62["default"]);

exports.Battlefield = Battlefield;

Battlefield.propTypes = {
	size: React.PropTypes.shape({
		width: React.PropTypes.number.isRequired,
		height: React.PropTypes.number.isRequired
	})
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../actions/gameplay_actions.es6":2,"../libs/controller-view.es6":4,"../libs/css-class-list.es6":5,"../libs/enum.es6":7,"../stores/gameplay_store.es6":12,"./cell.es6":17}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var Button = (function (_React$Component) {
	_inherits(Button, _React$Component);

	function Button() {
		_classCallCheck(this, Button);

		_get(Object.getPrototypeOf(Button.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(Button, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"span",
				{ className: _libsCssClassListEs62["default"].BUTTON, onClick: this.props.onRelease },
				this.props.text
			);
		}
	}]);

	return Button;
})(React.Component);

exports.Button = Button;

Button.propTypes = {
	onRelease: React.PropTypes.func,
	text: React.PropTypes.string.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2J1dHRvbi5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBc0IsNEJBQTRCOzs7O0lBR3JDLE1BQU07V0FBTixNQUFNOztVQUFOLE1BQU07d0JBQU4sTUFBTTs7NkJBQU4sTUFBTTs7O2NBQU4sTUFBTTs7U0FDWixrQkFBRztBQUNSLFVBQU87O01BQU0sU0FBUyxFQUFHLGlDQUFVLE1BQU0sQUFBRSxFQUFDLE9BQU8sRUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQUFBRTtJQUN6RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7SUFDWCxDQUFBO0dBQ1A7OztRQUxXLE1BQU07R0FBUyxLQUFLLENBQUMsU0FBUzs7OztBQVEzQyxNQUFNLENBQUMsU0FBUyxHQUFHO0FBQ2xCLFVBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUk7QUFDL0IsS0FBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7Q0FDdkMsQ0FBQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy92aWV3cy9idXR0b24uZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENsYXNzTGlzdCBmcm9tIFwiLi4vbGlicy9jc3MtY2xhc3MtbGlzdC5lczZcIjtcblxuXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0cmVuZGVyKCkge1xuXHRcdHJldHVybiA8c3BhbiBjbGFzc05hbWU9eyBDbGFzc0xpc3QuQlVUVE9OIH0gb25DbGljaz17IHRoaXMucHJvcHMub25SZWxlYXNlIH0+XG5cdFx0XHR7IHRoaXMucHJvcHMudGV4dCB9XG5cdFx0PC9zcGFuPlxuXHR9XG59XG5cbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG5cdG9uUmVsZWFzZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdHRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTsiXX0=
},{"../libs/css-class-list.es6":5}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var DigitClasses = ["", "ONE_MINE_ARROUND", "TWO_MINES_ARROUND", "THREE_MINES_ARROUND", "FOUR_MINES_ARROUND", "FIVE_MINES_ARROUND", "SIX_MINES_ARROUND", "SEVEN_MINES_ARROUND", "EIGHT_MINES_ARROUND"];

var getDigitClass = function getDigitClass(digit) {
	return _libsCssClassListEs62["default"][DigitClasses[digit]];
};

var size = 20;

exports.size = size;

var Cell = (function (_React$Component) {
	_inherits(Cell, _React$Component);

	function Cell() {
		_classCallCheck(this, Cell);

		_get(Object.getPrototypeOf(Cell.prototype), "constructor", this).call(this);

		this.state = { hovered: false };

		this.eventHandlers = {
			onMouseEnter: this.onMouseEnter.bind(this),
			onMouseLeave: this.onMouseLeave.bind(this)
		};
	}

	_createClass(Cell, [{
		key: "onMouseEnter",
		value: function onMouseEnter() {
			this.props.setCurrentCell(this.props.row, this.props.column);

			this.setState({ hovered: true });
		}
	}, {
		key: "onMouseLeave",
		value: function onMouseLeave() {
			this.setState({ hovered: false });
		}
	}, {
		key: "render",
		value: function render() {
			var classes = [_libsCssClassListEs62["default"].CELL];
			var content = null;

			if (this.props.checked) {
				if (this.props.hasMine) {
					if (this.props.blowUp) {
						classes.push(_libsCssClassListEs62["default"].UNDERMINED);
					}

					content = React.createElement(
						"span",
						null,
						" m "
					);
				} else {
					classes.push(_libsCssClassListEs62["default"].CHECKED);

					if (this.props.minesArround) {
						content = React.createElement(
							"span",
							{ className: getDigitClass(this.props.minesArround) },
							this.props.minesArround
						);
					} else {
						content = React.createElement(
							"div",
							{ className: _libsCssClassListEs62["default"].EMPTY_CELL },
							"   "
						);
					}
				}
			} else if (this.props.hasFlag) {
				content = React.createElement(
					"span",
					null,
					" f "
				);
			} else {
				if (this.props.marked) {
					classes.push(_libsCssClassListEs62["default"].MARKED);
				} else if (this.state.hovered) {
					classes.push(_libsCssClassListEs62["default"].HOVERED);
				}
			}

			return React.createElement(
				"div",
				_extends({ className: classes.join(" ") }, this.eventHandlers),
				content
			);
		}
	}]);

	return Cell;
})(React.Component);

exports.Cell = Cell;

Cell.propTypes = {
	row: React.PropTypes.number.isRequired,
	column: React.PropTypes.number.isRequired,
	checked: React.PropTypes.bool,
	hasMine: React.PropTypes.bool,
	hasFlag: React.PropTypes.bool,
	minesArround: React.PropTypes.number,
	setCurrentCell: React.PropTypes.func.isRequired,
	blowUp: React.PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2NlbGwuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBc0IsNEJBQTRCOzs7O0FBR2xELElBQUksWUFBWSxHQUFHLENBQUUsRUFBRSxFQUN0QixrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFDcEYsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLENBQ3ZGLENBQUM7O0FBRUYsSUFBSSxhQUFhLEdBQUcsU0FBaEIsYUFBYSxDQUFHLEtBQUs7UUFBSSxpQ0FBVSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FBQSxDQUFDOztBQUVyRCxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7Ozs7SUFFVixJQUFJO1dBQUosSUFBSTs7QUFDTCxVQURDLElBQUksR0FDRjt3QkFERixJQUFJOztBQUVmLDZCQUZXLElBQUksNkNBRVA7O0FBRVIsTUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzs7QUFFaEMsTUFBSSxDQUFDLGFBQWEsR0FBRztBQUNwQixlQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzFDLGVBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FDMUMsQ0FBQztFQUNGOztjQVZXLElBQUk7O1NBWUosd0JBQUc7QUFDZCxPQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU3RCxPQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDakM7OztTQUVXLHdCQUFHO0FBQ2QsT0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0dBQ2xDOzs7U0FFSyxrQkFBRztBQUNSLE9BQUksT0FBTyxHQUFHLENBQUMsaUNBQVUsSUFBSSxDQUFDLENBQUM7QUFDL0IsT0FBSSxPQUFPLEdBQUcsSUFBSSxDQUFDOztBQUVuQixPQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7QUFDdkIsU0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUN0QixhQUFPLENBQUMsSUFBSSxDQUFDLGlDQUFVLFVBQVUsQ0FBQyxDQUFDO01BQ25DOztBQUVELFlBQU8sR0FBRzs7OztNQUFnQixDQUFBO0tBQzFCLE1BQU07QUFDTixZQUFPLENBQUMsSUFBSSxDQUFDLGlDQUFVLE9BQU8sQ0FBQyxDQUFDOztBQUVoQyxTQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFO0FBQzVCLGFBQU8sR0FDTjs7U0FBTSxTQUFTLEVBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEFBQUU7T0FDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO09BQ25CLENBQUE7TUFDUixNQUFNO0FBQ04sYUFBTyxHQUFHOztTQUFLLFNBQVMsRUFBRyxpQ0FBVSxVQUFVLEFBQUU7O09BQWUsQ0FBQTtNQUNoRTtLQUNEO0lBQ0QsTUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFdBQU8sR0FBRzs7OztLQUFnQixDQUFBO0lBQzFCLE1BQU07QUFDTixRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ3RCLFlBQU8sQ0FBQyxJQUFJLENBQUMsaUNBQVUsTUFBTSxDQUFDLENBQUM7S0FDL0IsTUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFlBQU8sQ0FBQyxJQUFJLENBQUMsaUNBQVUsT0FBTyxDQUFDLENBQUM7S0FDaEM7SUFDRDs7QUFFRCxVQUFPOztlQUFLLFNBQVMsRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxBQUFFLElBQU0sSUFBSSxDQUFDLGFBQWE7SUFDaEUsT0FBTztJQUNKLENBQUE7R0FDTjs7O1FBNURXLElBQUk7R0FBUyxLQUFLLENBQUMsU0FBUzs7OztBQStEekMsSUFBSSxDQUFDLFNBQVMsR0FBRztBQUNoQixJQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtBQUN0QyxPQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtBQUN6QyxRQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJO0FBQzdCLFFBQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUk7QUFDN0IsUUFBTyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUM3QixhQUFZLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO0FBQ3BDLGVBQWMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQy9DLE9BQU0sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUk7Q0FDNUIsQ0FBQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy92aWV3cy9jZWxsLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGFzc0xpc3QgZnJvbSBcIi4uL2xpYnMvY3NzLWNsYXNzLWxpc3QuZXM2XCI7XG5cblxubGV0IERpZ2l0Q2xhc3NlcyA9IFsgXCJcIixcblx0XCJPTkVfTUlORV9BUlJPVU5EXCIsIFwiVFdPX01JTkVTX0FSUk9VTkRcIiwgXCJUSFJFRV9NSU5FU19BUlJPVU5EXCIsIFwiRk9VUl9NSU5FU19BUlJPVU5EXCIsXG5cdFwiRklWRV9NSU5FU19BUlJPVU5EXCIsIFwiU0lYX01JTkVTX0FSUk9VTkRcIiwgXCJTRVZFTl9NSU5FU19BUlJPVU5EXCIsIFwiRUlHSFRfTUlORVNfQVJST1VORFwiXG5dO1xuXG5sZXQgZ2V0RGlnaXRDbGFzcyA9IGRpZ2l0ID0+IENsYXNzTGlzdFtEaWdpdENsYXNzZXNbZGlnaXRdXTtcblxuZXhwb3J0IGNvbnN0IHNpemUgPSAyMDtcblxuZXhwb3J0IGNsYXNzIENlbGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IHsgaG92ZXJlZDogZmFsc2UgfTtcblxuXHRcdHRoaXMuZXZlbnRIYW5kbGVycyA9IHtcblx0XHRcdG9uTW91c2VFbnRlcjogdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKSxcblx0XHRcdG9uTW91c2VMZWF2ZTogdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKVxuXHRcdH07XG5cdH1cblxuXHRvbk1vdXNlRW50ZXIoKSB7XG5cdFx0dGhpcy5wcm9wcy5zZXRDdXJyZW50Q2VsbCh0aGlzLnByb3BzLnJvdywgdGhpcy5wcm9wcy5jb2x1bW4pO1xuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG5cdH1cblxuXHRvbk1vdXNlTGVhdmUoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuXHR9XG5cblx0cmVuZGVyKCkge1xuXHRcdGxldCBjbGFzc2VzID0gW0NsYXNzTGlzdC5DRUxMXTtcblx0XHRsZXQgY29udGVudCA9IG51bGw7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5jaGVja2VkKSB7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5oYXNNaW5lKSB7XG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLmJsb3dVcCkge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChDbGFzc0xpc3QuVU5ERVJNSU5FRCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb250ZW50ID0gPHNwYW4+IG0gPC9zcGFuPlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKENsYXNzTGlzdC5DSEVDS0VEKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLm1pbmVzQXJyb3VuZCkge1xuXHRcdFx0XHRcdGNvbnRlbnQgPVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXsgZ2V0RGlnaXRDbGFzcyh0aGlzLnByb3BzLm1pbmVzQXJyb3VuZCkgfT5cblx0XHRcdFx0XHRcdFx0eyB0aGlzLnByb3BzLm1pbmVzQXJyb3VuZCB9XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGVudCA9IDxkaXYgY2xhc3NOYW1lPXsgQ2xhc3NMaXN0LkVNUFRZX0NFTEwgfT4gJm5ic3A7IDwvZGl2PlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlXG5cdFx0aWYgKHRoaXMucHJvcHMuaGFzRmxhZykge1xuXHRcdFx0Y29udGVudCA9IDxzcGFuPiBmIDwvc3Bhbj5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMucHJvcHMubWFya2VkKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChDbGFzc0xpc3QuTUFSS0VEKTtcblx0XHRcdH0gZWxzZVxuXHRcdFx0aWYgKHRoaXMuc3RhdGUuaG92ZXJlZCkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goQ2xhc3NMaXN0LkhPVkVSRUQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzZXMuam9pbihcIiBcIikgfSB7IC4uLnRoaXMuZXZlbnRIYW5kbGVycyB9PlxuXHRcdFx0eyBjb250ZW50IH1cblx0XHQ8L2Rpdj5cblx0fVxufVxuXG5DZWxsLnByb3BUeXBlcyA9IHtcblx0cm93OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cdGNvbHVtbjogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXHRjaGVja2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcblx0aGFzTWluZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdGhhc0ZsYWc6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuXHRtaW5lc0Fycm91bmQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG5cdHNldEN1cnJlbnRDZWxsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRibG93VXA6IFJlYWN0LlByb3BUeXBlcy5ib29sXG59OyJdfQ==
},{"../libs/css-class-list.es6":5}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _horizontal_layoutEs6 = require("./horizontal_layout.es6");

var _buttonEs6 = require("./button.es6");

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var GameControls = (function (_React$Component) {
	_inherits(GameControls, _React$Component);

	function GameControls() {
		_classCallCheck(this, GameControls);

		_get(Object.getPrototypeOf(GameControls.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(GameControls, [{
		key: "render",
		value: function render() {
			var restartButton = null;

			if (this.props.restartable) {
				restartButton = React.createElement(_buttonEs6.Button, { onRelease: _actionsApp_actionsEs6.restartGame, text: "Restart" });
			}

			return React.createElement(
				_horizontal_layoutEs6.HorizontalLayout,
				null,
				React.createElement(_buttonEs6.Button, { onRelease: _actionsApp_actionsEs6.toMainSrceen, text: "Menu" }),
				restartButton
			);
		}
	}]);

	return GameControls;
})(React.Component);

exports.GameControls = GameControls;

GameControls.propTypes = {
	restartable: React.PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2dhbWVfY29udHJvbHMuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O29DQUFpQyx5QkFBeUI7O3lCQUNuQyxjQUFjOztxQ0FDSyw0QkFBNEI7O0lBR3pELFlBQVk7V0FBWixZQUFZOztVQUFaLFlBQVk7d0JBQVosWUFBWTs7NkJBQVosWUFBWTs7O2NBQVosWUFBWTs7U0FDbEIsa0JBQUc7QUFDUixPQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7O0FBRXpCLE9BQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDM0IsaUJBQWEsR0FDWix5Q0FBUSxTQUFTLG9DQUFnQixFQUFDLElBQUksRUFBQyxTQUFTLEdBQUcsQ0FBQTtJQUNwRDs7QUFFRCxVQUFPOzs7SUFDTix5Q0FBUSxTQUFTLHFDQUFpQixFQUFDLElBQUksRUFBQyxNQUFNLEdBQUc7SUFDL0MsYUFBYTtJQUNHLENBQUE7R0FDbkI7OztRQWJXLFlBQVk7R0FBUyxLQUFLLENBQUMsU0FBUzs7OztBQWdCakQsWUFBWSxDQUFDLFNBQVMsR0FBRztBQUN4QixZQUFXLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJO0NBQ2pDLENBQUMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvdmlld3MvZ2FtZV9jb250cm9scy5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIb3Jpem9udGFsTGF5b3V0IH0gZnJvbSBcIi4vaG9yaXpvbnRhbF9sYXlvdXQuZXM2XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi9idXR0b24uZXM2XCI7XG5pbXBvcnQgeyB0b01haW5TcmNlZW4sIHJlc3RhcnRHYW1lIH0gZnJvbSBcIi4uL2FjdGlvbnMvYXBwX2FjdGlvbnMuZXM2XCI7XG5cblxuZXhwb3J0IGNsYXNzIEdhbWVDb250cm9scyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cdHJlbmRlcigpIHtcblx0XHRsZXQgcmVzdGFydEJ1dHRvbiA9IG51bGw7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5yZXN0YXJ0YWJsZSkge1xuXHRcdFx0cmVzdGFydEJ1dHRvbiA9XG5cdFx0XHRcdDxCdXR0b24gb25SZWxlYXNlPXsgcmVzdGFydEdhbWUgfSB0ZXh0PVwiUmVzdGFydFwiIC8+XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDxIb3Jpem9udGFsTGF5b3V0PlxuXHRcdFx0PEJ1dHRvbiBvblJlbGVhc2U9eyB0b01haW5TcmNlZW4gfSB0ZXh0PVwiTWVudVwiIC8+XG5cdFx0XHR7IHJlc3RhcnRCdXR0b24gfVxuXHRcdDwvSG9yaXpvbnRhbExheW91dD5cblx0fVxufVxuXG5HYW1lQ29udHJvbHMucHJvcFR5cGVzID0ge1xuXHRyZXN0YXJ0YWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbn07Il19
},{"../actions/app_actions.es6":1,"./button.es6":16,"./horizontal_layout.es6":22}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _horizontal_layoutEs6 = require("./horizontal_layout.es6");

var _timerEs6 = require("./timer.es6");

var _minesEs6 = require("./mines.es6");

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var GameInfo = (function (_React$Component) {
	_inherits(GameInfo, _React$Component);

	function GameInfo() {
		_classCallCheck(this, GameInfo);

		_get(Object.getPrototypeOf(GameInfo.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(GameInfo, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].GAME_INFO },
				React.createElement(
					_horizontal_layoutEs6.HorizontalLayout,
					null,
					React.createElement(_timerEs6.Timer, null),
					React.createElement(_minesEs6.Mines, null)
				)
			);
		}
	}]);

	return GameInfo;
})(React.Component);

exports.GameInfo = GameInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2dhbWVfaW5mby5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBaUMseUJBQXlCOzt3QkFDcEMsYUFBYTs7d0JBQ2IsYUFBYTs7bUNBQ2IsNEJBQTRCOzs7O0lBR3JDLFFBQVE7V0FBUixRQUFROztVQUFSLFFBQVE7d0JBQVIsUUFBUTs7NkJBQVIsUUFBUTs7O2NBQVIsUUFBUTs7U0FDZCxrQkFBRztBQUNSLFVBQU87O01BQUssU0FBUyxFQUFHLGlDQUFVLFNBQVMsQUFBRTtJQUM1Qzs7O0tBQ0MsMENBQVM7S0FDVCwwQ0FBUztLQUNTO0lBQ2QsQ0FBQTtHQUNOOzs7UUFSVyxRQUFRO0dBQVMsS0FBSyxDQUFDLFNBQVMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvdmlld3MvZ2FtZV9pbmZvLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhvcml6b250YWxMYXlvdXQgfSBmcm9tIFwiLi9ob3Jpem9udGFsX2xheW91dC5lczZcIjtcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSBcIi4vdGltZXIuZXM2XCI7XG5pbXBvcnQgeyBNaW5lcyB9IGZyb20gXCIuL21pbmVzLmVzNlwiO1xuaW1wb3J0IENsYXNzTGlzdCBmcm9tIFwiLi4vbGlicy9jc3MtY2xhc3MtbGlzdC5lczZcIjtcblxuXG5leHBvcnQgY2xhc3MgR2FtZUluZm8gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXHRyZW5kZXIoKSB7XG5cdFx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsgQ2xhc3NMaXN0LkdBTUVfSU5GTyB9PlxuXHRcdFx0PEhvcml6b250YWxMYXlvdXQ+XG5cdFx0XHRcdDxUaW1lciAvPlxuXHRcdFx0XHQ8TWluZXMgLz5cblx0XHRcdDwvSG9yaXpvbnRhbExheW91dD5cblx0XHQ8L2Rpdj5cblx0fVxufSJdfQ==
},{"../libs/css-class-list.es6":5,"./horizontal_layout.es6":22,"./mines.es6":24,"./timer.es6":26}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsControllerViewEs6 = require("../libs/controller-view.es6");

var _libsControllerViewEs62 = _interopRequireDefault(_libsControllerViewEs6);

var _storesGameplay_storeEs6 = require("../stores/gameplay_store.es6");

var _battlefieldEs6 = require("./battlefield.es6");

var _game_controlsEs6 = require("./game_controls.es6");

var _game_infoEs6 = require("./game_info.es6");

var _gameover_layoutEs6 = require("./gameover_layout.es6");

var _cellEs6 = require("./cell.es6");

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var GameLayout = (function (_ControllerView) {
	_inherits(GameLayout, _ControllerView);

	function GameLayout() {
		_classCallCheck(this, GameLayout);

		_get(Object.getPrototypeOf(GameLayout.prototype), "constructor", this).call(this, _storesGameplay_storeEs6.gameplayStore);
	}

	_createClass(GameLayout, [{
		key: "computeState",
		value: function computeState(payload) {
			return {
				size: {
					width: _cellEs6.size * payload.columns,
					height: _cellEs6.size * payload.rows
				},
				isOver: payload.status == _storesGameplay_storeEs6.GameStatus.COMPLETE,
				score: payload.score
			};
		}
	}, {
		key: "render",
		value: function render() {
			var gameoverLayout = this.state.isOver ? React.createElement(_gameover_layoutEs6.GameoverLayout, { score: this.state.score, size: this.state.size }) : null;

			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].GAME_LAYOUT },
				React.createElement(_game_controlsEs6.GameControls, { restartable: this.state.isOver }),
				React.createElement(
					"div",
					{ className: _libsCssClassListEs62["default"].GAME },
					React.createElement(_battlefieldEs6.Battlefield, { size: this.state.size }),
					gameoverLayout,
					React.createElement(_game_infoEs6.GameInfo, null)
				)
			);
		}
	}]);

	return GameLayout;
})(_libsControllerViewEs62["default"]);

exports.GameLayout = GameLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2dhbWVfbGF5b3V0LmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3FDQUEyQiw2QkFBNkI7Ozs7dUNBQ2QsOEJBQThCOzs4QkFDNUMsbUJBQW1COztnQ0FDbEIscUJBQXFCOzs0QkFDekIsaUJBQWlCOztrQ0FDWCx1QkFBdUI7O3VCQUNqQyxZQUFZOzttQ0FDWCw0QkFBNEI7Ozs7SUFHckMsVUFBVTtXQUFWLFVBQVU7O0FBQ1gsVUFEQyxVQUFVLEdBQ1I7d0JBREYsVUFBVTs7QUFFckIsNkJBRlcsVUFBVSxxRkFFQTtFQUNyQjs7Y0FIVyxVQUFVOztTQUtWLHNCQUFDLE9BQU8sRUFBRTtBQUNyQixVQUFPO0FBQ04sUUFBSSxFQUFFO0FBQ0wsVUFBSyxFQUFFLGdCQUFPLE9BQU8sQ0FBQyxPQUFPO0FBQzdCLFdBQU0sRUFBRSxnQkFBTyxPQUFPLENBQUMsSUFBSTtLQUMzQjtBQUNELFVBQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxJQUFJLG9DQUFXLFFBQVE7QUFDN0MsU0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO0lBQ3BCLENBQUM7R0FDRjs7O1NBRUssa0JBQUc7QUFDUixPQUFJLGNBQWMsR0FDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQ2pCLDBEQUFnQixLQUFLLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEFBQUUsRUFBQyxJQUFJLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEFBQUUsR0FBRyxHQUNwRSxJQUFJLENBQUM7O0FBRVIsVUFBTzs7TUFBSyxTQUFTLEVBQUcsaUNBQVUsV0FBVyxBQUFFO0lBQzlDLHNEQUFjLFdBQVcsRUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQUFBRSxHQUFHO0lBRWxEOztPQUFLLFNBQVMsRUFBRyxpQ0FBVSxJQUFJLEFBQUU7S0FDaEMsbURBQWEsSUFBSSxFQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxBQUFFLEdBQUc7S0FDdEMsY0FBYztLQUNoQixpREFBWTtLQUNQO0lBQ0QsQ0FBQTtHQUNOOzs7UUEvQlcsVUFBVSIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy92aWV3cy9nYW1lX2xheW91dC5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29udHJvbGxlclZpZXcgZnJvbSBcIi4uL2xpYnMvY29udHJvbGxlci12aWV3LmVzNlwiO1xuaW1wb3J0IHsgZ2FtZXBsYXlTdG9yZSwgR2FtZVN0YXR1cyB9IGZyb20gXCIuLi9zdG9yZXMvZ2FtZXBsYXlfc3RvcmUuZXM2XCI7XG5pbXBvcnQgeyBCYXR0bGVmaWVsZCB9IGZyb20gXCIuL2JhdHRsZWZpZWxkLmVzNlwiO1xuaW1wb3J0IHsgR2FtZUNvbnRyb2xzIH0gZnJvbSBcIi4vZ2FtZV9jb250cm9scy5lczZcIjtcbmltcG9ydCB7IEdhbWVJbmZvIH0gZnJvbSBcIi4vZ2FtZV9pbmZvLmVzNlwiO1xuaW1wb3J0IHsgR2FtZW92ZXJMYXlvdXQgfSBmcm9tIFwiLi9nYW1lb3Zlcl9sYXlvdXQuZXM2XCI7XG5pbXBvcnQgeyBzaXplIH0gZnJvbSBcIi4vY2VsbC5lczZcIjtcbmltcG9ydCBDbGFzc0xpc3QgZnJvbSBcIi4uL2xpYnMvY3NzLWNsYXNzLWxpc3QuZXM2XCI7XG5cblxuZXhwb3J0IGNsYXNzIEdhbWVMYXlvdXQgZXh0ZW5kcyBDb250cm9sbGVyVmlldyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKGdhbWVwbGF5U3RvcmUpO1xuXHR9XG5cblx0Y29tcHV0ZVN0YXRlKHBheWxvYWQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2l6ZToge1xuXHRcdFx0XHR3aWR0aDogc2l6ZSAqIHBheWxvYWQuY29sdW1ucyxcblx0XHRcdFx0aGVpZ2h0OiBzaXplICogcGF5bG9hZC5yb3dzXG5cdFx0XHR9LFxuXHRcdFx0aXNPdmVyOiBwYXlsb2FkLnN0YXR1cyA9PSBHYW1lU3RhdHVzLkNPTVBMRVRFLFxuXHRcdFx0c2NvcmU6IHBheWxvYWQuc2NvcmVcblx0XHR9O1xuXHR9XG5cblx0cmVuZGVyKCkge1xuXHRcdGxldCBnYW1lb3ZlckxheW91dCA9XG5cdFx0XHR0aGlzLnN0YXRlLmlzT3Zlcj9cblx0XHRcdDxHYW1lb3ZlckxheW91dCBzY29yZT17IHRoaXMuc3RhdGUuc2NvcmUgfSBzaXplPXsgdGhpcy5zdGF0ZS5zaXplIH0gLz5cblx0XHRcdDogbnVsbDtcblxuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IENsYXNzTGlzdC5HQU1FX0xBWU9VVCB9PlxuXHRcdFx0PEdhbWVDb250cm9scyByZXN0YXJ0YWJsZT17IHRoaXMuc3RhdGUuaXNPdmVyIH0gLz5cblxuXHRcdFx0PGRpdiBjbGFzc05hbWU9eyBDbGFzc0xpc3QuR0FNRSB9PlxuXHRcdFx0XHQ8QmF0dGxlZmllbGQgc2l6ZT17IHRoaXMuc3RhdGUuc2l6ZSB9IC8+XG5cdFx0XHRcdHsgZ2FtZW92ZXJMYXlvdXQgfVxuXHRcdFx0XHQ8R2FtZUluZm8gLz5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHR9XG59Il19
},{"../libs/controller-view.es6":4,"../libs/css-class-list.es6":5,"../stores/gameplay_store.es6":12,"./battlefield.es6":15,"./cell.es6":17,"./game_controls.es6":18,"./game_info.es6":19,"./gameover_layout.es6":21}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _storesGameplay_storeEs6 = require("../stores/gameplay_store.es6");

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var GameoverLayout = (function (_React$Component) {
	_inherits(GameoverLayout, _React$Component);

	function GameoverLayout() {
		_classCallCheck(this, GameoverLayout);

		_get(Object.getPrototypeOf(GameoverLayout.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(GameoverLayout, [{
		key: "render",
		value: function render() {
			var text = null;

			switch (this.props.score) {
				case _storesGameplay_storeEs6.GameOverStatus.SUCCESS:
					text = "WIN";
					break;
				case _storesGameplay_storeEs6.GameOverStatus.FAIL:
					text = "LOSE";
					break;
			}

			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].GAMEOVER_LAYOUT, style: this.props.size },
				React.createElement(
					"span",
					{ className: _libsCssClassListEs62["default"].GAMEOVER_TEXT },
					text
				)
			);
		}
	}]);

	return GameoverLayout;
})(React.Component);

exports.GameoverLayout = GameoverLayout;

GameoverLayout.propTypes = {
	size: React.PropTypes.shape({
		width: React.PropTypes.number.isRequired,
		height: React.PropTypes.number.isRequired
	})
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2dhbWVvdmVyX2xheW91dC5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FBK0IsOEJBQThCOzttQ0FDdkMsNEJBQTRCOzs7O0lBR3JDLGNBQWM7V0FBZCxjQUFjOztVQUFkLGNBQWM7d0JBQWQsY0FBYzs7NkJBQWQsY0FBYzs7O2NBQWQsY0FBYzs7U0FDcEIsa0JBQUc7QUFDUixPQUFJLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRWhCLFdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO0FBQ3ZCLFNBQUssd0NBQWUsT0FBTztBQUMxQixTQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ2IsV0FBTTtBQUFBLEFBQ1AsU0FBSyx3Q0FBZSxJQUFJO0FBQ3ZCLFNBQUksR0FBRyxNQUFNLENBQUM7QUFDZCxXQUFNO0FBQUEsSUFDUDs7QUFFRCxVQUFPOztNQUFLLFNBQVMsRUFBRyxpQ0FBVSxlQUFlLEFBQUUsRUFBQyxLQUFLLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEFBQUU7SUFDNUU7O09BQU0sU0FBUyxFQUFHLGlDQUFVLGFBQWEsQUFBRTtLQUN4QyxJQUFJO0tBQ0E7SUFDRixDQUFBO0dBQ047OztRQWxCVyxjQUFjO0dBQVMsS0FBSyxDQUFDLFNBQVM7Ozs7QUFxQm5ELGNBQWMsQ0FBQyxTQUFTLEdBQUc7QUFDMUIsS0FBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQzNCLE9BQUssRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVO0FBQ3hDLFFBQU0sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVO0VBQ3pDLENBQUM7Q0FDRixDQUFDIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2dhbWVvdmVyX2xheW91dC5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lT3ZlclN0YXR1cyB9IGZyb20gXCIuLi9zdG9yZXMvZ2FtZXBsYXlfc3RvcmUuZXM2XCI7XG5pbXBvcnQgQ2xhc3NMaXN0IGZyb20gXCIuLi9saWJzL2Nzcy1jbGFzcy1saXN0LmVzNlwiO1xuXG5cbmV4cG9ydCBjbGFzcyBHYW1lb3ZlckxheW91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cdHJlbmRlcigpIHtcblx0XHRsZXQgdGV4dCA9IG51bGw7XG5cblx0XHRzd2l0Y2ggKHRoaXMucHJvcHMuc2NvcmUpIHtcblx0XHRcdGNhc2UgR2FtZU92ZXJTdGF0dXMuU1VDQ0VTUzpcblx0XHRcdFx0dGV4dCA9IFwiV0lOXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBHYW1lT3ZlclN0YXR1cy5GQUlMOlxuXHRcdFx0XHR0ZXh0ID0gXCJMT1NFXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IENsYXNzTGlzdC5HQU1FT1ZFUl9MQVlPVVQgfSBzdHlsZT17IHRoaXMucHJvcHMuc2l6ZSB9PlxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXsgQ2xhc3NMaXN0LkdBTUVPVkVSX1RFWFQgfT5cblx0XHRcdFx0eyB0ZXh0IH1cblx0XHRcdDwvc3Bhbj5cblx0XHQ8L2Rpdj5cblx0fVxufVxuXG5HYW1lb3ZlckxheW91dC5wcm9wVHlwZXMgPSB7XG5cdHNpemU6IFJlYWN0LlByb3BUeXBlcy5zaGFwZSh7XG5cdFx0d2lkdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblx0XHRoZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuXHR9KVxufTsiXX0=
},{"../libs/css-class-list.es6":5,"../stores/gameplay_store.es6":12}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var HorizontalLayout = (function (_React$Component) {
	_inherits(HorizontalLayout, _React$Component);

	function HorizontalLayout() {
		_classCallCheck(this, HorizontalLayout);

		_get(Object.getPrototypeOf(HorizontalLayout.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(HorizontalLayout, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].HORIZONTAL_LAYOUT },
				this.props.children
			);
		}
	}]);

	return HorizontalLayout;
})(React.Component);

exports.HorizontalLayout = HorizontalLayout;

HorizontalLayout.propTypes = {
	children: React.PropTypes.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL2hvcml6b250YWxfbGF5b3V0LmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O21DQUFzQiw0QkFBNEI7Ozs7SUFHckMsZ0JBQWdCO1dBQWhCLGdCQUFnQjs7VUFBaEIsZ0JBQWdCO3dCQUFoQixnQkFBZ0I7OzZCQUFoQixnQkFBZ0I7OztjQUFoQixnQkFBZ0I7O1NBQ3RCLGtCQUFHO0FBQ1IsVUFBTzs7TUFBSyxTQUFTLEVBQUcsaUNBQVUsaUJBQWlCLEFBQUU7SUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO0lBQ2hCLENBQUE7R0FDTjs7O1FBTFcsZ0JBQWdCO0dBQVMsS0FBSyxDQUFDLFNBQVM7Ozs7QUFRckQsZ0JBQWdCLENBQUMsU0FBUyxHQUFHO0FBQzVCLFNBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUc7Q0FDN0IsQ0FBQyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy92aWV3cy9ob3Jpem9udGFsX2xheW91dC5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xhc3NMaXN0IGZyb20gXCIuLi9saWJzL2Nzcy1jbGFzcy1saXN0LmVzNlwiO1xuXG5cbmV4cG9ydCBjbGFzcyBIb3Jpem9udGFsTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0cmVuZGVyKCkge1xuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IENsYXNzTGlzdC5IT1JJWk9OVEFMX0xBWU9VVCB9PlxuXHRcdFx0eyB0aGlzLnByb3BzLmNoaWxkcmVuIH1cblx0XHQ8L2Rpdj5cblx0fVxufVxuXG5Ib3Jpem9udGFsTGF5b3V0LnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnlcbn07Il19
},{"../libs/css-class-list.es6":5}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _vertical_layoutEs6 = require("./vertical_layout.es6");

var _buttonEs6 = require("./button.es6");

var _storesGameplay_storeEs6 = require("../stores/gameplay_store.es6");

var _actionsApp_actionsEs6 = require("../actions/app_actions.es6");

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var MenuLayout = (function (_React$Component) {
	_inherits(MenuLayout, _React$Component);

	function MenuLayout() {
		_classCallCheck(this, MenuLayout);

		_get(Object.getPrototypeOf(MenuLayout.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(MenuLayout, [{
		key: "getButton",
		value: function getButton(text, handler) {
			return React.createElement(_buttonEs6.Button, { key: text, onRelease: handler, text: text });
		}
	}, {
		key: "render",
		value: function render() {
			var buttons = [];

			if (this.props.resumable) {
				buttons.push(this.getButton("Resume", _actionsApp_actionsEs6.continueGame));
			}

			var start = function start(difficult) {
				return function () {
					return (0, _actionsApp_actionsEs6.startGame)(difficult);
				};
			};

			buttons.push(this.getButton("Easy", start(_storesGameplay_storeEs6.Difficult.EASY)));
			buttons.push(this.getButton("Normal", start(_storesGameplay_storeEs6.Difficult.NORMAL)));
			buttons.push(this.getButton("Hard", start(_storesGameplay_storeEs6.Difficult.HARD)));

			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].MENU_LAYOUT },
				React.createElement(
					_vertical_layoutEs6.VerticalLayout,
					null,
					buttons
				)
			);
		}
	}]);

	return MenuLayout;
})(React.Component);

exports.MenuLayout = MenuLayout;

MenuLayout.propTypes = {
	resumable: React.PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21lbnVfbGF5b3V0LmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O2tDQUErQix1QkFBdUI7O3lCQUMvQixjQUFjOzt1Q0FDWCw4QkFBOEI7O3FDQUNoQiw0QkFBNEI7O21DQUM5Qyw0QkFBNEI7Ozs7SUFHckMsVUFBVTtXQUFWLFVBQVU7O1VBQVYsVUFBVTt3QkFBVixVQUFVOzs2QkFBVixVQUFVOzs7Y0FBVixVQUFVOztTQUNiLG1CQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDeEIsVUFBTyx5Q0FBUSxHQUFHLEVBQUcsSUFBSSxBQUFFLEVBQUMsU0FBUyxFQUFHLE9BQU8sQUFBRSxFQUFDLElBQUksRUFBRyxJQUFJLEFBQUUsR0FBRyxDQUFBO0dBQ2xFOzs7U0FFSyxrQkFBRztBQUNSLE9BQUksT0FBTyxHQUFHLEVBQUUsQ0FBQzs7QUFFakIsT0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUN6QixXQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxzQ0FBZSxDQUFDLENBQUM7SUFDckQ7O0FBRUQsT0FBSSxLQUFLLEdBQUcsU0FBUixLQUFLLENBQUcsU0FBUztXQUFJO1lBQU0sc0NBQVUsU0FBUyxDQUFDO0tBQUE7SUFBQSxDQUFDOztBQUVwRCxVQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxtQ0FBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsVUFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsbUNBQVUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLFVBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLG1DQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFNUQsVUFBTzs7TUFBSyxTQUFTLEVBQUcsaUNBQVUsV0FBVyxBQUFFO0lBQzlDOzs7S0FDRyxPQUFPO0tBQ087SUFDWixDQUFBO0dBQ047OztRQXZCVyxVQUFVO0dBQVMsS0FBSyxDQUFDLFNBQVM7Ozs7QUEwQi9DLFVBQVUsQ0FBQyxTQUFTLEdBQUc7QUFDdEIsVUFBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSTtDQUMvQixDQUFDIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21lbnVfbGF5b3V0LmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlcnRpY2FsTGF5b3V0IH0gZnJvbSBcIi4vdmVydGljYWxfbGF5b3V0LmVzNlwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4vYnV0dG9uLmVzNlwiO1xuaW1wb3J0IHsgRGlmZmljdWx0IH0gZnJvbSBcIi4uL3N0b3Jlcy9nYW1lcGxheV9zdG9yZS5lczZcIjtcbmltcG9ydCB7IHN0YXJ0R2FtZSwgY29udGludWVHYW1lIH0gZnJvbSBcIi4uL2FjdGlvbnMvYXBwX2FjdGlvbnMuZXM2XCI7XG5pbXBvcnQgQ2xhc3NMaXN0IGZyb20gXCIuLi9saWJzL2Nzcy1jbGFzcy1saXN0LmVzNlwiO1xuXG5cbmV4cG9ydCBjbGFzcyBNZW51TGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0Z2V0QnV0dG9uKHRleHQsIGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gPEJ1dHRvbiBrZXk9eyB0ZXh0IH0gb25SZWxlYXNlPXsgaGFuZGxlciB9IHRleHQ9eyB0ZXh0IH0gLz5cblx0fVxuXG5cdHJlbmRlcigpIHtcblx0XHRsZXQgYnV0dG9ucyA9IFtdO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMucmVzdW1hYmxlKSB7XG5cdFx0XHRidXR0b25zLnB1c2godGhpcy5nZXRCdXR0b24oXCJSZXN1bWVcIiwgY29udGludWVHYW1lKSk7XG5cdFx0fVxuXG5cdFx0bGV0IHN0YXJ0ID0gZGlmZmljdWx0ID0+ICgpID0+IHN0YXJ0R2FtZShkaWZmaWN1bHQpO1xuXG5cdFx0YnV0dG9ucy5wdXNoKHRoaXMuZ2V0QnV0dG9uKFwiRWFzeVwiLCBzdGFydChEaWZmaWN1bHQuRUFTWSkpKTtcblx0XHRidXR0b25zLnB1c2godGhpcy5nZXRCdXR0b24oXCJOb3JtYWxcIiwgc3RhcnQoRGlmZmljdWx0Lk5PUk1BTCkpKTtcblx0XHRidXR0b25zLnB1c2godGhpcy5nZXRCdXR0b24oXCJIYXJkXCIsIHN0YXJ0KERpZmZpY3VsdC5IQVJEKSkpO1xuXG5cdFx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsgQ2xhc3NMaXN0Lk1FTlVfTEFZT1VUIH0+XG5cdFx0XHQ8VmVydGljYWxMYXlvdXQ+XG5cdFx0XHRcdHsgYnV0dG9ucyB9XG5cdFx0XHQ8L1ZlcnRpY2FsTGF5b3V0PlxuXHRcdDwvZGl2PlxuXHR9XG59XG5cbk1lbnVMYXlvdXQucHJvcFR5cGVzID0ge1xuXHRyZXN1bWFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sXG59OyJdfQ==
},{"../actions/app_actions.es6":1,"../libs/css-class-list.es6":5,"../stores/gameplay_store.es6":12,"./button.es6":16,"./vertical_layout.es6":28}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsControllerViewEs6 = require("../libs/controller-view.es6");

var _libsControllerViewEs62 = _interopRequireDefault(_libsControllerViewEs6);

var _storesMines_storeEs6 = require("../stores/mines_store.es6");

var _storesMines_storeEs62 = _interopRequireDefault(_storesMines_storeEs6);

var Mines = (function (_ControllerView) {
	_inherits(Mines, _ControllerView);

	function Mines() {
		_classCallCheck(this, Mines);

		_get(Object.getPrototypeOf(Mines.prototype), "constructor", this).call(this, _storesMines_storeEs62["default"]);
	}

	_createClass(Mines, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"span",
				null,
				" Mines: ",
				this.state.mines,
				" "
			);
		}
	}]);

	return Mines;
})(_libsControllerViewEs62["default"]);

exports.Mines = Mines;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21pbmVzLmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3FDQUEyQiw2QkFBNkI7Ozs7b0NBQ2pDLDJCQUEyQjs7OztJQUdyQyxLQUFLO1dBQUwsS0FBSzs7QUFDTixVQURDLEtBQUssR0FDSDt3QkFERixLQUFLOztBQUVoQiw2QkFGVyxLQUFLLGdGQUVFO0VBQ2xCOztjQUhXLEtBQUs7O1NBS1gsa0JBQUc7QUFDUixVQUFPOzs7O0lBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSzs7SUFBVSxDQUFBO0dBQ2pEOzs7UUFQVyxLQUFLIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21pbmVzLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyVmlldyBmcm9tIFwiLi4vbGlicy9jb250cm9sbGVyLXZpZXcuZXM2XCI7XG5pbXBvcnQgbWluZXNTdG9yZSBmcm9tIFwiLi4vc3RvcmVzL21pbmVzX3N0b3JlLmVzNlwiO1xuXG5cbmV4cG9ydCBjbGFzcyBNaW5lcyBleHRlbmRzIENvbnRyb2xsZXJWaWV3IHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIobWluZXNTdG9yZSk7XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cdFx0cmV0dXJuIDxzcGFuPiBNaW5lczogeyB0aGlzLnN0YXRlLm1pbmVzIH0gPC9zcGFuPlxuXHR9XG59Il19
},{"../libs/controller-view.es6":4,"../stores/mines_store.es6":13}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsControllerViewEs6 = require("../libs/controller-view.es6");

var _libsControllerViewEs62 = _interopRequireDefault(_libsControllerViewEs6);

var _storesApp_storeEs6 = require("../stores/app_store.es6");

var _menu_layoutEs6 = require("./menu_layout.es6");

var _game_layoutEs6 = require("./game_layout.es6");

var _touch_device_layoutEs6 = require("./touch_device_layout.es6");

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var Minesweeper = (function (_ControllerView) {
	_inherits(Minesweeper, _ControllerView);

	function Minesweeper() {
		_classCallCheck(this, Minesweeper);

		_get(Object.getPrototypeOf(Minesweeper.prototype), "constructor", this).call(this, _storesApp_storeEs6.appStore);

		this.handlers = {
			onMouseDown: this.preventDefault,
			onContextMenu: this.preventDefault
		};

		this.linkProps = {
			href: "https://github.com/PavelDymkov/minesweeper",
			target: "_blank",
			onMouseDown: this.stopPropagation,
			onContextMenu: this.stopPropagation
		};
	}

	_createClass(Minesweeper, [{
		key: "preventDefault",
		value: function preventDefault(event) {
			event.preventDefault();
		}
	}, {
		key: "stopPropagation",
		value: function stopPropagation(event) {
			event.stopPropagation();
		}
	}, {
		key: "render",
		value: function render() {
			var content = null;

			switch (this.state.layout) {
				case _storesApp_storeEs6.Layouts.MENU:
					content = React.createElement(_menu_layoutEs6.MenuLayout, { resumable: this.state.gameInProcess });
					break;

				case _storesApp_storeEs6.Layouts.GAME:
					content = React.createElement(_game_layoutEs6.GameLayout, null);
					break;

				case _storesApp_storeEs6.Layouts.TOUCH_DEVICE:
					content = React.createElement(_touch_device_layoutEs6.TouchDeviceLayout, null);
					break;
			}

			return React.createElement(
				"div",
				_extends({ className: _libsCssClassListEs62["default"].APPLICATION }, this.handlers),
				content,
				React.createElement(
					"div",
					_extends({ className: _libsCssClassListEs62["default"].SOURCE_LINK }, this.linkHandlers),
					React.createElement(
						"a",
						this.linkProps,
						"Исходный код игры"
					)
				)
			);
		}
	}]);

	return Minesweeper;
})(_libsControllerViewEs62["default"]);

exports.Minesweeper = Minesweeper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21pbmVzd2VlcGVyLmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBQTJCLDZCQUE2Qjs7OztrQ0FDdEIseUJBQXlCOzs4QkFDaEMsbUJBQW1COzs4QkFDbkIsbUJBQW1COztzQ0FDWiwyQkFBMkI7O21DQUN2Qyw0QkFBNEI7Ozs7SUFHckMsV0FBVztXQUFYLFdBQVc7O0FBQ1osVUFEQyxXQUFXLEdBQ1Q7d0JBREYsV0FBVzs7QUFFdEIsNkJBRlcsV0FBVywyRUFFTjs7QUFFaEIsTUFBSSxDQUFDLFFBQVEsR0FBRztBQUNmLGNBQVcsRUFBRSxJQUFJLENBQUMsY0FBYztBQUNoQyxnQkFBYSxFQUFFLElBQUksQ0FBQyxjQUFjO0dBQ2xDLENBQUM7O0FBRUYsTUFBSSxDQUFDLFNBQVMsR0FBRztBQUNoQixPQUFJLEVBQUUsNENBQTRDO0FBQ2xELFNBQU0sRUFBRSxRQUFRO0FBQ2hCLGNBQVcsRUFBRSxJQUFJLENBQUMsZUFBZTtBQUNqQyxnQkFBYSxFQUFFLElBQUksQ0FBQyxlQUFlO0dBQ25DLENBQUM7RUFDRjs7Y0FmVyxXQUFXOztTQWlCVCx3QkFBQyxLQUFLLEVBQUU7QUFDckIsUUFBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0dBQ3ZCOzs7U0FFYyx5QkFBQyxLQUFLLEVBQUU7QUFDdEIsUUFBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0dBQ3hCOzs7U0FFSyxrQkFBRztBQUNSLE9BQUksT0FBTyxHQUFHLElBQUksQ0FBQzs7QUFFbkIsV0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07QUFDeEIsU0FBSyw0QkFBUSxJQUFJO0FBQ2hCLFlBQU8sR0FBRyxrREFBWSxTQUFTLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEFBQUUsR0FBRyxDQUFBO0FBQy9ELFdBQU07O0FBQUEsQUFFUCxTQUFLLDRCQUFRLElBQUk7QUFDaEIsWUFBTyxHQUFHLHFEQUFjLENBQUE7QUFDeEIsV0FBTTs7QUFBQSxBQUVQLFNBQUssNEJBQVEsWUFBWTtBQUN4QixZQUFPLEdBQUcsb0VBQXFCLENBQUE7QUFDL0IsV0FBTTtBQUFBLElBQ1A7O0FBRUQsVUFBTzs7ZUFBSyxTQUFTLEVBQUcsaUNBQVUsV0FBVyxBQUFFLElBQU0sSUFBSSxDQUFDLFFBQVE7SUFDL0QsT0FBTztJQUVUOztnQkFBSyxTQUFTLEVBQUcsaUNBQVUsV0FBVyxBQUFFLElBQU0sSUFBSSxDQUFDLFlBQVk7S0FDOUQ7O01BQVEsSUFBSSxDQUFDLFNBQVM7O01BRWxCO0tBQ0M7SUFDRCxDQUFBO0dBQ047OztRQW5EVyxXQUFXIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL21pbmVzd2VlcGVyLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyVmlldyBmcm9tIFwiLi4vbGlicy9jb250cm9sbGVyLXZpZXcuZXM2XCI7XG5pbXBvcnQgeyBhcHBTdG9yZSwgTGF5b3V0cyB9IGZyb20gXCIuLi9zdG9yZXMvYXBwX3N0b3JlLmVzNlwiO1xuaW1wb3J0IHsgTWVudUxheW91dCB9IGZyb20gXCIuL21lbnVfbGF5b3V0LmVzNlwiO1xuaW1wb3J0IHsgR2FtZUxheW91dCB9IGZyb20gXCIuL2dhbWVfbGF5b3V0LmVzNlwiO1xuaW1wb3J0IHsgVG91Y2hEZXZpY2VMYXlvdXQgfSBmcm9tIFwiLi90b3VjaF9kZXZpY2VfbGF5b3V0LmVzNlwiO1xuaW1wb3J0IENsYXNzTGlzdCBmcm9tIFwiLi4vbGlicy9jc3MtY2xhc3MtbGlzdC5lczZcIjtcblxuXG5leHBvcnQgY2xhc3MgTWluZXN3ZWVwZXIgZXh0ZW5kcyBDb250cm9sbGVyVmlldyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKGFwcFN0b3JlKTtcblxuXHRcdHRoaXMuaGFuZGxlcnMgPSB7XG5cdFx0XHRvbk1vdXNlRG93bjogdGhpcy5wcmV2ZW50RGVmYXVsdCxcblx0XHRcdG9uQ29udGV4dE1lbnU6IHRoaXMucHJldmVudERlZmF1bHRcblx0XHR9O1xuXG5cdFx0dGhpcy5saW5rUHJvcHMgPSB7XG5cdFx0XHRocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9QYXZlbER5bWtvdi9taW5lc3dlZXBlclwiLFxuXHRcdFx0dGFyZ2V0OiBcIl9ibGFua1wiLFxuXHRcdFx0b25Nb3VzZURvd246IHRoaXMuc3RvcFByb3BhZ2F0aW9uLFxuXHRcdFx0b25Db250ZXh0TWVudTogdGhpcy5zdG9wUHJvcGFnYXRpb25cblx0XHR9O1xuXHR9XG5cblx0cHJldmVudERlZmF1bHQoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG5cblx0c3RvcFByb3BhZ2F0aW9uKGV2ZW50KSB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cdFx0bGV0IGNvbnRlbnQgPSBudWxsO1xuXG5cdFx0c3dpdGNoICh0aGlzLnN0YXRlLmxheW91dCkge1xuXHRcdFx0Y2FzZSBMYXlvdXRzLk1FTlU6XG5cdFx0XHRcdGNvbnRlbnQgPSA8TWVudUxheW91dCByZXN1bWFibGU9eyB0aGlzLnN0YXRlLmdhbWVJblByb2Nlc3MgfSAvPlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBMYXlvdXRzLkdBTUU6XG5cdFx0XHRcdGNvbnRlbnQgPSA8R2FtZUxheW91dCAvPlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBMYXlvdXRzLlRPVUNIX0RFVklDRTpcblx0XHRcdFx0Y29udGVudCA9IDxUb3VjaERldmljZUxheW91dCAvPlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9eyBDbGFzc0xpc3QuQVBQTElDQVRJT04gfSB7IC4uLnRoaXMuaGFuZGxlcnMgfT5cblx0XHRcdHsgY29udGVudCB9XG5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXsgQ2xhc3NMaXN0LlNPVVJDRV9MSU5LIH0geyAuLi50aGlzLmxpbmtIYW5kbGVycyB9PlxuXHRcdFx0XHQ8YSB7IC4uLnRoaXMubGlua1Byb3BzIH0+XG5cdFx0XHRcdFx00JjRgdGF0L7QtNC90YvQuSDQutC+0LQg0LjQs9GA0Ytcblx0XHRcdFx0PC9hPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdH1cbn0iXX0=
},{"../libs/controller-view.es6":4,"../libs/css-class-list.es6":5,"../stores/app_store.es6":11,"./game_layout.es6":20,"./menu_layout.es6":23,"./touch_device_layout.es6":27}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsControllerViewEs6 = require("../libs/controller-view.es6");

var _libsControllerViewEs62 = _interopRequireDefault(_libsControllerViewEs6);

var _storesTime_storeEs6 = require("../stores/time_store.es6");

var _storesTime_storeEs62 = _interopRequireDefault(_storesTime_storeEs6);

var Timer = (function (_ControllerView) {
	_inherits(Timer, _ControllerView);

	function Timer() {
		_classCallCheck(this, Timer);

		_get(Object.getPrototypeOf(Timer.prototype), "constructor", this).call(this, _storesTime_storeEs62["default"]);

		this.timer = null;
		this.timeoutCallback = this.timeoutCallback.bind(this);
	}

	_createClass(Timer, [{
		key: "onChange",
		value: function onChange(payload) {
			var state = this.computeState(payload);

			this.setTimer(state);
			this.setState(state);
		}
	}, {
		key: "componentWillUnmount",
		value: function componentWillUnmount() {
			_get(Object.getPrototypeOf(Timer.prototype), "componentWillUnmount", this).call(this);

			this.deactivateTimer();
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			_get(Object.getPrototypeOf(Timer.prototype), "componentDidMount", this).call(this);

			this.setTimer(this.state);
		}
	}, {
		key: "setTimer",
		value: function setTimer(state) {
			if (state.isRunning) {
				if (!this.timer) this.timer = setTimeout(this.timeoutCallback, 1000 - state.delay);
			} else {
				this.deactivateTimer();
			}
		}
	}, {
		key: "timeoutCallback",
		value: function timeoutCallback() {
			this.setState({
				time: this.state.time + 1
			});

			this.timer = setTimeout(this.timeoutCallback, 1000);
		}
	}, {
		key: "deactivateTimer",
		value: function deactivateTimer() {
			clearTimeout(this.timer);
			this.timer = null;
		}
	}, {
		key: "render",
		value: function render() {
			return React.createElement(
				"span",
				null,
				" Time: ",
				this.state.time,
				" "
			);
		}
	}]);

	return Timer;
})(_libsControllerViewEs62["default"]);

exports.Timer = Timer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL3RpbWVyLmVzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3FDQUEyQiw2QkFBNkI7Ozs7bUNBQ2xDLDBCQUEwQjs7OztJQUduQyxLQUFLO1dBQUwsS0FBSzs7QUFDTixVQURDLEtBQUssR0FDSDt3QkFERixLQUFLOztBQUVoQiw2QkFGVyxLQUFLLCtFQUVDOztBQUVqQixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixNQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3ZEOztjQU5XLEtBQUs7O1NBUVQsa0JBQUMsT0FBTyxFQUFFO0FBQ2pCLE9BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXZDLE9BQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckIsT0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNyQjs7O1NBRW1CLGdDQUFHO0FBQ3RCLDhCQWhCVyxLQUFLLHNEQWdCYTs7QUFFN0IsT0FBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0dBQ3ZCOzs7U0FFZ0IsNkJBQUc7QUFDbkIsOEJBdEJXLEtBQUssbURBc0JVOztBQUUxQixPQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQjs7O1NBRU8sa0JBQUMsS0FBSyxFQUFFO0FBQ2YsT0FBSSxLQUFLLENBQUMsU0FBUyxFQUFFO0FBQ3BCLFFBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxNQUFNO0FBQ04sUUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3ZCO0dBQ0Q7OztTQUVjLDJCQUFHO0FBQ2pCLE9BQUksQ0FBQyxRQUFRLENBQUM7QUFDYixRQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUN6QixDQUFDLENBQUM7O0FBRUgsT0FBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztHQUNwRDs7O1NBRWMsMkJBQUc7QUFDakIsZUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztHQUNsQjs7O1NBRUssa0JBQUc7QUFDUixVQUFPOzs7O0lBQWUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJOztJQUFVLENBQUE7R0FDL0M7OztRQW5EVyxLQUFLIiwiZmlsZSI6Ii9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL3RpbWVyLmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyVmlldyBmcm9tIFwiLi4vbGlicy9jb250cm9sbGVyLXZpZXcuZXM2XCI7XG5pbXBvcnQgdGltZVN0b3JlIGZyb20gXCIuLi9zdG9yZXMvdGltZV9zdG9yZS5lczZcIjtcblxuXG5leHBvcnQgY2xhc3MgVGltZXIgZXh0ZW5kcyBDb250cm9sbGVyVmlldyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHRpbWVTdG9yZSk7XG5cblx0XHR0aGlzLnRpbWVyID0gbnVsbDtcblx0XHR0aGlzLnRpbWVvdXRDYWxsYmFjayA9IHRoaXMudGltZW91dENhbGxiYWNrLmJpbmQodGhpcyk7XG5cdH1cblxuXHRvbkNoYW5nZShwYXlsb2FkKSB7XG5cdFx0bGV0IHN0YXRlID0gdGhpcy5jb21wdXRlU3RhdGUocGF5bG9hZCk7XG5cblx0XHR0aGlzLnNldFRpbWVyKHN0YXRlKTtcdFxuXHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuXHR9XG5cblx0Y29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0c3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcblx0XHRcblx0XHR0aGlzLmRlYWN0aXZhdGVUaW1lcigpO1xuXHR9XG5cblx0Y29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0c3VwZXIuY29tcG9uZW50RGlkTW91bnQoKTtcblxuXHRcdHRoaXMuc2V0VGltZXIodGhpcy5zdGF0ZSk7XG5cdH1cblxuXHRzZXRUaW1lcihzdGF0ZSkge1xuXHRcdGlmIChzdGF0ZS5pc1J1bm5pbmcpIHtcblx0XHRcdGlmICghdGhpcy50aW1lcilcblx0XHRcdFx0dGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy50aW1lb3V0Q2FsbGJhY2ssIDEwMDAgLSBzdGF0ZS5kZWxheSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZGVhY3RpdmF0ZVRpbWVyKCk7XG5cdFx0fVxuXHR9XG5cblx0dGltZW91dENhbGxiYWNrKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0dGltZTogdGhpcy5zdGF0ZS50aW1lICsgMVxuXHRcdH0pO1xuXG5cdFx0dGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy50aW1lb3V0Q2FsbGJhY2ssIDEwMDApO1xuXHR9XG5cblx0ZGVhY3RpdmF0ZVRpbWVyKCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcblx0XHR0aGlzLnRpbWVyID0gbnVsbDtcblx0fVxuXG5cdHJlbmRlcigpIHtcblx0XHRyZXR1cm4gPHNwYW4+IFRpbWU6IHsgdGhpcy5zdGF0ZS50aW1lIH0gPC9zcGFuPlxuXHR9XG59Il19
},{"../libs/controller-view.es6":4,"../stores/time_store.es6":14}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var TouchDeviceLayout = (function (_React$Component) {
	_inherits(TouchDeviceLayout, _React$Component);

	function TouchDeviceLayout() {
		_classCallCheck(this, TouchDeviceLayout);

		_get(Object.getPrototypeOf(TouchDeviceLayout.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(TouchDeviceLayout, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].TOUCH_DEVICE_LAYOUT },
				"Touch-устройства не поддерживаются. Только мышка, только хардкор =)"
			);
		}
	}]);

	return TouchDeviceLayout;
})(React.Component);

exports.TouchDeviceLayout = TouchDeviceLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL3RvdWNoX2RldmljZV9sYXlvdXQuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBQXNCLDRCQUE0Qjs7OztJQUdyQyxpQkFBaUI7V0FBakIsaUJBQWlCOztVQUFqQixpQkFBaUI7d0JBQWpCLGlCQUFpQjs7NkJBQWpCLGlCQUFpQjs7O2NBQWpCLGlCQUFpQjs7U0FDdkIsa0JBQUc7QUFDUixVQUFPOztNQUFLLFNBQVMsRUFBRyxpQ0FBVSxtQkFBbUIsQUFBRTs7SUFFakQsQ0FBQTtHQUNOOzs7UUFMVyxpQkFBaUI7R0FBUyxLQUFLLENBQUMsU0FBUyIsImZpbGUiOiIvaG9tZS9wZHlta292L215LXByb2plY3RzL21pbmVzd2VlcGVyL3NvdXJjZXMvc2NyaXB0cy92aWV3cy90b3VjaF9kZXZpY2VfbGF5b3V0LmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGFzc0xpc3QgZnJvbSBcIi4uL2xpYnMvY3NzLWNsYXNzLWxpc3QuZXM2XCI7XG5cblxuZXhwb3J0IGNsYXNzIFRvdWNoRGV2aWNlTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0cmVuZGVyKCkge1xuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IENsYXNzTGlzdC5UT1VDSF9ERVZJQ0VfTEFZT1VUIH0+XG5cdFx0XHRUb3VjaC3Rg9GB0YLRgNC+0LnRgdGC0LLQsCDQvdC1INC/0L7QtNC00LXRgNC20LjQstCw0Y7RgtGB0Y8uINCi0L7Qu9GM0LrQviDQvNGL0YjQutCwLCDRgtC+0LvRjNC60L4g0YXQsNGA0LTQutC+0YAgPSlcblx0XHQ8L2Rpdj5cblx0fVxufSJdfQ==
},{"../libs/css-class-list.es6":5}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libsCssClassListEs6 = require("../libs/css-class-list.es6");

var _libsCssClassListEs62 = _interopRequireDefault(_libsCssClassListEs6);

var VerticalLayout = (function (_React$Component) {
	_inherits(VerticalLayout, _React$Component);

	function VerticalLayout() {
		_classCallCheck(this, VerticalLayout);

		_get(Object.getPrototypeOf(VerticalLayout.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(VerticalLayout, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				{ className: _libsCssClassListEs62["default"].VERTICAL_LAYOUT },
				this.props.children
			);
		}
	}]);

	return VerticalLayout;
})(React.Component);

exports.VerticalLayout = VerticalLayout;

VerticalLayout.propTypes = {
	children: React.PropTypes.arrayOf(React.PropTypes.element)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3BkeW1rb3YvbXktcHJvamVjdHMvbWluZXN3ZWVwZXIvc291cmNlcy9zY3JpcHRzL3ZpZXdzL3ZlcnRpY2FsX2xheW91dC5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBc0IsNEJBQTRCOzs7O0lBR3JDLGNBQWM7V0FBZCxjQUFjOztVQUFkLGNBQWM7d0JBQWQsY0FBYzs7NkJBQWQsY0FBYzs7O2NBQWQsY0FBYzs7U0FDcEIsa0JBQUc7QUFDUixVQUFPOztNQUFLLFNBQVMsRUFBRyxpQ0FBVSxlQUFlLEFBQUU7SUFDaEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO0lBQ2hCLENBQUE7R0FDTjs7O1FBTFcsY0FBYztHQUFTLEtBQUssQ0FBQyxTQUFTOzs7O0FBUW5ELGNBQWMsQ0FBQyxTQUFTLEdBQUc7QUFDMUIsU0FBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0NBQzFELENBQUMiLCJmaWxlIjoiL2hvbWUvcGR5bWtvdi9teS1wcm9qZWN0cy9taW5lc3dlZXBlci9zb3VyY2VzL3NjcmlwdHMvdmlld3MvdmVydGljYWxfbGF5b3V0LmVzNiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGFzc0xpc3QgZnJvbSBcIi4uL2xpYnMvY3NzLWNsYXNzLWxpc3QuZXM2XCI7XG5cblxuZXhwb3J0IGNsYXNzIFZlcnRpY2FsTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0cmVuZGVyKCkge1xuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT17IENsYXNzTGlzdC5WRVJUSUNBTF9MQVlPVVQgfT5cblx0XHRcdHsgdGhpcy5wcm9wcy5jaGlsZHJlbiB9XG5cdFx0PC9kaXY+XG5cdH1cbn1cblxuVmVydGljYWxMYXlvdXQucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQpXG59OyJdfQ==
},{"../libs/css-class-list.es6":5}]},{},[3])
//# sourceMappingURL=data:application/json;base64,
